
iW - ST Starter Kit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002860  08002860  00012860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c4  080028c4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080028c4  080028c4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c4  080028c4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c4  080028c4  000128c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080028cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d94  20000060  0800292c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000104  20000df4  0800292c  00020df4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a2ff  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000335b  00000000  00000000  0003a3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  0003d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014f8  00000000  00000000  0003e3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011681  00000000  00000000  0003f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd5b  00000000  00000000  00050f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006b34a  00000000  00000000  0006cccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a48  00000000  00000000  000d8018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000cd8e  00000000  00000000  000daa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  000e77ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002848 	.word	0x08002848

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08002848 	.word	0x08002848

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <vApplicationGetIdleTaskMemory+0x10>)
 8000222:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <vApplicationGetIdleTaskMemory+0x14>)
 8000226:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000228:	2360      	movs	r3, #96	; 0x60
 800022a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	200001fc 	.word	0x200001fc
 8000234:	2000007c 	.word	0x2000007c

08000238 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000238:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin);
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	2090      	movs	r0, #144	; 0x90
 800023e:	01c9      	lsls	r1, r1, #7
 8000240:	05c0      	lsls	r0, r0, #23
 8000242:	f000 fb01 	bl	8000848 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000246:	20fa      	movs	r0, #250	; 0xfa
 8000248:	0040      	lsls	r0, r0, #1
 800024a:	f001 fb13 	bl	8001874 <osDelay>
  for(;;)
 800024e:	e7f4      	b.n	800023a <StartDefaultTask+0x2>

08000250 <SystemClock_Config>:
{
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000254:	2218      	movs	r2, #24
 8000256:	2100      	movs	r1, #0
 8000258:	a80a      	add	r0, sp, #40	; 0x28
 800025a:	f002 fa0f 	bl	800267c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	2210      	movs	r2, #16
 8000260:	2100      	movs	r1, #0
 8000262:	4668      	mov	r0, sp
 8000264:	f002 fa0a 	bl	800267c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	2210      	movs	r2, #16
 800026a:	2100      	movs	r1, #0
 800026c:	a804      	add	r0, sp, #16
 800026e:	f002 fa05 	bl	800267c <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	2201      	movs	r2, #1
 8000276:	9208      	str	r2, [sp, #32]
 8000278:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	025b      	lsls	r3, r3, #9
 800027e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000280:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000284:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000286:	02db      	lsls	r3, r3, #11
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800028c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800028e:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f000 fae2 	bl	8000858 <HAL_RCC_OscConfig>
 8000294:	2800      	cmp	r0, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000298:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800029a:	e7fe      	b.n	800029a <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a0:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002a2:	2101      	movs	r1, #1
 80002a4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002aa:	f000 fd2f 	bl	8000d0c <HAL_RCC_ClockConfig>
 80002ae:	2800      	cmp	r0, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x66>
 80002b2:	b672      	cpsid	i
	while (1)
 80002b4:	e7fe      	b.n	80002b4 <SystemClock_Config+0x64>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002b6:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002ba:	9504      	str	r5, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002bc:	f000 fe3e 	bl	8000f3c <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	2800      	cmp	r0, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x78>
 80002c4:	b672      	cpsid	i
	while (1)
 80002c6:	e7fe      	b.n	80002c6 <SystemClock_Config+0x76>
}
 80002c8:	b015      	add	sp, #84	; 0x54
 80002ca:	bd30      	pop	{r4, r5, pc}

080002cc <main>:
{
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d0:	ac02      	add	r4, sp, #8
  HAL_Init();
 80002d2:	f000 f947 	bl	8000564 <HAL_Init>
  SystemClock_Config();
 80002d6:	f7ff ffbb 	bl	8000250 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002da:	2214      	movs	r2, #20
 80002dc:	2100      	movs	r1, #0
 80002de:	0020      	movs	r0, r4
 80002e0:	f002 f9cc 	bl	800267c <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <main+0xb8>)
 80002e8:	03c9      	lsls	r1, r1, #15
 80002ea:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 80002ec:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ee:	430a      	orrs	r2, r1
 80002f0:	615a      	str	r2, [r3, #20]
 80002f2:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 80002f4:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002f6:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002fa:	9200      	str	r2, [sp, #0]
 80002fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fe:	695a      	ldr	r2, [r3, #20]
 8000300:	0289      	lsls	r1, r1, #10
 8000302:	430a      	orrs	r2, r1
 8000304:	615a      	str	r2, [r3, #20]
 8000306:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030a:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 800030c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 8000310:	01c9      	lsls	r1, r1, #7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 8000314:	f000 fa92 	bl	800083c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	2301      	movs	r3, #1
 800031c:	01d2      	lsls	r2, r2, #7
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 800031e:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 8000320:	9202      	str	r2, [sp, #8]
 8000322:	9303      	str	r3, [sp, #12]
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 8000328:	05c0      	lsls	r0, r0, #23
 800032a:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 800032c:	9204      	str	r2, [sp, #16]
 800032e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 8000330:	f000 f978 	bl	8000624 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8000334:	4814      	ldr	r0, [pc, #80]	; (8000388 <main+0xbc>)
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <main+0xc0>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000338:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 800033a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 800033c:	2396      	movs	r3, #150	; 0x96
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000344:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000348:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800034a:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800034e:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000350:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000352:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000354:	f001 f996 	bl	8001684 <HAL_UART_Init>
 8000358:	2800      	cmp	r0, #0
 800035a:	d001      	beq.n	8000360 <main+0x94>
 800035c:	b672      	cpsid	i
	while (1)
 800035e:	e7fe      	b.n	800035e <main+0x92>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 96);
 8000360:	0022      	movs	r2, r4
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <main+0xc4>)
 8000364:	cb23      	ldmia	r3!, {r0, r1, r5}
 8000366:	c223      	stmia	r2!, {r0, r1, r5}
 8000368:	cb23      	ldmia	r3!, {r0, r1, r5}
 800036a:	c223      	stmia	r2!, {r0, r1, r5}
 800036c:	681b      	ldr	r3, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800036e:	2100      	movs	r1, #0
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 96);
 8000370:	6013      	str	r3, [r2, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000372:	0020      	movs	r0, r4
 8000374:	f001 fa48 	bl	8001808 <osThreadCreate>
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <main+0xc8>)
 800037a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800037c:	f001 fa3e 	bl	80017fc <osKernelStart>
  while (1)
 8000380:	e7fe      	b.n	8000380 <main+0xb4>
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	40021000 	.word	0x40021000
 8000388:	200002a0 	.word	0x200002a0
 800038c:	40013800 	.word	0x40013800
 8000390:	08002860 	.word	0x08002860
 8000394:	2000029c 	.word	0x2000029c

08000398 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM16) {
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0x14>)
 800039a:	6802      	ldr	r2, [r0, #0]
{
 800039c:	b510      	push	{r4, lr}
  if (htim->Instance == TIM16) {
 800039e:	429a      	cmp	r2, r3
 80003a0:	d000      	beq.n	80003a4 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 80003a2:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80003a4:	f000 f8ee 	bl	8000584 <HAL_IncTick>
}
 80003a8:	e7fb      	b.n	80003a2 <HAL_TIM_PeriodElapsedCallback+0xa>
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	40014400 	.word	0x40014400

080003b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b0:	2201      	movs	r2, #1
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <HAL_MspInit+0x38>)
{
 80003b4:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b6:	6999      	ldr	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80003b8:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ba:	4311      	orrs	r1, r2
 80003bc:	6199      	str	r1, [r3, #24]
 80003be:	6999      	ldr	r1, [r3, #24]
{
 80003c0:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c6:	9200      	str	r2, [sp, #0]
 80003c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	69da      	ldr	r2, [r3, #28]
 80003cc:	0549      	lsls	r1, r1, #21
 80003ce:	430a      	orrs	r2, r1
 80003d0:	61da      	str	r2, [r3, #28]
 80003d2:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80003d4:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d6:	400b      	ands	r3, r1
 80003d8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80003da:	2103      	movs	r1, #3
 80003dc:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80003e0:	f000 f8e2 	bl	80005a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e4:	b003      	add	sp, #12
 80003e6:	bd00      	pop	{pc}
 80003e8:	40021000 	.word	0x40021000

080003ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003ec:	b510      	push	{r4, lr}
 80003ee:	0004      	movs	r4, r0
 80003f0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	2214      	movs	r2, #20
 80003f4:	2100      	movs	r1, #0
 80003f6:	a802      	add	r0, sp, #8
 80003f8:	f002 f940 	bl	800267c <memset>
  if(huart->Instance==USART1)
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <HAL_UART_MspInit+0x60>)
 80003fe:	6822      	ldr	r2, [r4, #0]
 8000400:	429a      	cmp	r2, r3
 8000402:	d001      	beq.n	8000408 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000404:	b008      	add	sp, #32
 8000406:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <HAL_UART_MspInit+0x64>)
 800040c:	01c9      	lsls	r1, r1, #7
 800040e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000410:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8000412:	430a      	orrs	r2, r1
 8000414:	619a      	str	r2, [r3, #24]
 8000416:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000418:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 800041a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 800041e:	9200      	str	r2, [sp, #0]
 8000420:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	0289      	lsls	r1, r1, #10
 8000426:	430a      	orrs	r2, r1
 8000428:	615a      	str	r2, [r3, #20]
 800042a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800042c:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	400b      	ands	r3, r1
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000434:	2302      	movs	r3, #2
 8000436:	00d2      	lsls	r2, r2, #3
 8000438:	9202      	str	r2, [sp, #8]
 800043a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000442:	3b02      	subs	r3, #2
 8000444:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000446:	f000 f8ed 	bl	8000624 <HAL_GPIO_Init>
}
 800044a:	e7db      	b.n	8000404 <HAL_UART_MspInit+0x18>
 800044c:	40013800 	.word	0x40013800
 8000450:	40021000 	.word	0x40021000

08000454 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	4b21      	ldr	r3, [pc, #132]	; (80004dc <HAL_InitTick+0x88>)
{
 8000458:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM16_CLK_ENABLE();
 800045a:	699a      	ldr	r2, [r3, #24]
 800045c:	0289      	lsls	r1, r1, #10
 800045e:	430a      	orrs	r2, r1
 8000460:	619a      	str	r2, [r3, #24]
 8000462:	699b      	ldr	r3, [r3, #24]
{
 8000464:	b086      	sub	sp, #24
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000466:	400b      	ands	r3, r1
 8000468:	9301      	str	r3, [sp, #4]
{
 800046a:	0006      	movs	r6, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800046c:	4669      	mov	r1, sp
 800046e:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000470:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000472:	f000 fd47 	bl	8000f04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM16 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000476:	9b05      	ldr	r3, [sp, #20]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d117      	bne.n	80004ac <HAL_InitTick+0x58>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800047c:	f000 fd32 	bl	8000ee4 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000480:	4c17      	ldr	r4, [pc, #92]	; (80004e0 <HAL_InitTick+0x8c>)
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <HAL_InitTick+0x90>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000484:	4918      	ldr	r1, [pc, #96]	; (80004e8 <HAL_InitTick+0x94>)
  htim16.Instance = TIM16;
 8000486:	6023      	str	r3, [r4, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <HAL_InitTick+0x98>)
 800048a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800048c:	f7ff fe3c 	bl	8000108 <__udivsi3>
  htim16.Init.Prescaler = uwPrescalerValue;
  htim16.Init.ClockDivision = 0;
 8000490:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000492:	3801      	subs	r0, #1
  htim16.Init.Prescaler = uwPrescalerValue;
 8000494:	6060      	str	r0, [r4, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim16);
 8000496:	0020      	movs	r0, r4
  htim16.Init.ClockDivision = 0;
 8000498:	6123      	str	r3, [r4, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049a:	60a3      	str	r3, [r4, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049c:	61a3      	str	r3, [r4, #24]
  status = HAL_TIM_Base_Init(&htim16);
 800049e:	f000 fded 	bl	800107c <HAL_TIM_Base_Init>
 80004a2:	1e05      	subs	r5, r0, #0
  if (status == HAL_OK)
 80004a4:	d006      	beq.n	80004b4 <HAL_InitTick+0x60>
    }
  }

 /* Return function status */
  return status;
}
 80004a6:	0028      	movs	r0, r5
 80004a8:	b006      	add	sp, #24
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004ac:	f000 fd1a 	bl	8000ee4 <HAL_RCC_GetPCLK1Freq>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	e7e5      	b.n	8000480 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim16);
 80004b4:	0020      	movs	r0, r4
 80004b6:	f000 fe4f 	bl	8001158 <HAL_TIM_Base_Start_IT>
 80004ba:	1e05      	subs	r5, r0, #0
    if (status == HAL_OK)
 80004bc:	d1f3      	bne.n	80004a6 <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80004be:	2015      	movs	r0, #21
 80004c0:	f000 f8a4 	bl	800060c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004c4:	2e03      	cmp	r6, #3
 80004c6:	d901      	bls.n	80004cc <HAL_InitTick+0x78>
        status = HAL_ERROR;
 80004c8:	2501      	movs	r5, #1
 80004ca:	e7ec      	b.n	80004a6 <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority, 0U);
 80004cc:	2200      	movs	r2, #0
 80004ce:	0031      	movs	r1, r6
 80004d0:	2015      	movs	r0, #21
 80004d2:	f000 f869 	bl	80005a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_InitTick+0x9c>)
 80004d8:	601e      	str	r6, [r3, #0]
 80004da:	e7e4      	b.n	80004a6 <HAL_InitTick+0x52>
 80004dc:	40021000 	.word	0x40021000
 80004e0:	20000328 	.word	0x20000328
 80004e4:	40014400 	.word	0x40014400
 80004e8:	000f4240 	.word	0x000f4240
 80004ec:	000003e7 	.word	0x000003e7
 80004f0:	20000008 	.word	0x20000008

080004f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f4:	e7fe      	b.n	80004f4 <NMI_Handler>
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <HardFault_Handler>
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80004fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80004fe:	4802      	ldr	r0, [pc, #8]	; (8000508 <TIM16_IRQHandler+0xc>)
 8000500:	f000 fe5a 	bl	80011b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	20000328 	.word	0x20000328

0800050c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800050c:	4770      	bx	lr
 800050e:	46c0      	nop			; (mov r8, r8)

08000510 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000514:	f7ff fffa 	bl	800050c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490d      	ldr	r1, [pc, #52]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0a      	ldr	r4, [pc, #40]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053e:	f002 f903 	bl	8002748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000542:	f7ff fec3 	bl	80002cc <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000554:	080028cc 	.word	0x080028cc
  ldr r2, =_sbss
 8000558:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800055c:	20000df4 	.word	0x20000df4

08000560 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_IRQHandler>
	...

08000564 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000564:	2110      	movs	r1, #16
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_Init+0x1c>)
{
 8000568:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800056a:	6813      	ldr	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800056c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800056e:	430b      	orrs	r3, r1
 8000570:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000572:	f7ff ff6f 	bl	8000454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000576:	f7ff ff1b 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800057a:	2000      	movs	r0, #0
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	40022000 	.word	0x40022000

08000584 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000584:	4a03      	ldr	r2, [pc, #12]	; (8000594 <HAL_IncTick+0x10>)
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_IncTick+0x14>)
 8000588:	6811      	ldr	r1, [r2, #0]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	185b      	adds	r3, r3, r1
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	4770      	bx	lr
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	20000370 	.word	0x20000370
 8000598:	20000004 	.word	0x20000004

0800059c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <HAL_GetTick+0x8>)
 800059e:	6818      	ldr	r0, [r3, #0]
}
 80005a0:	4770      	bx	lr
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	20000370 	.word	0x20000370

080005a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80005aa:	2800      	cmp	r0, #0
 80005ac:	db14      	blt.n	80005d8 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_NVIC_SetPriority+0x5c>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	469c      	mov	ip, r3
 80005b4:	23ff      	movs	r3, #255	; 0xff
 80005b6:	0884      	lsrs	r4, r0, #2
 80005b8:	4002      	ands	r2, r0
 80005ba:	0018      	movs	r0, r3
 80005bc:	26c0      	movs	r6, #192	; 0xc0
 80005be:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005c0:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005c2:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005c4:	400b      	ands	r3, r1
 80005c6:	4093      	lsls	r3, r2
 80005c8:	00a4      	lsls	r4, r4, #2
 80005ca:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005cc:	00b6      	lsls	r6, r6, #2
 80005ce:	59a5      	ldr	r5, [r4, r6]
 80005d0:	4385      	bics	r5, r0
 80005d2:	432b      	orrs	r3, r5
 80005d4:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <HAL_NVIC_SetPriority+0x60>)
 80005da:	230f      	movs	r3, #15
 80005dc:	4694      	mov	ip, r2
 80005de:	2203      	movs	r2, #3
 80005e0:	4003      	ands	r3, r0
 80005e2:	4010      	ands	r0, r2
 80005e4:	32fc      	adds	r2, #252	; 0xfc
 80005e6:	0015      	movs	r5, r2
 80005e8:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ea:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ec:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ee:	400a      	ands	r2, r1
 80005f0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f2:	3b08      	subs	r3, #8
 80005f4:	089b      	lsrs	r3, r3, #2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4463      	add	r3, ip
 80005fa:	69dc      	ldr	r4, [r3, #28]
 80005fc:	43ac      	bics	r4, r5
 80005fe:	4322      	orrs	r2, r4
 8000600:	61da      	str	r2, [r3, #28]
 8000602:	e7e8      	b.n	80005d6 <HAL_NVIC_SetPriority+0x2e>
 8000604:	e000e100 	.word	0xe000e100
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800060c:	2800      	cmp	r0, #0
 800060e:	db05      	blt.n	800061c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000610:	221f      	movs	r2, #31
 8000612:	2301      	movs	r3, #1
 8000614:	4002      	ands	r2, r0
 8000616:	4093      	lsls	r3, r2
 8000618:	4a01      	ldr	r2, [pc, #4]	; (8000620 <HAL_NVIC_EnableIRQ+0x14>)
 800061a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	e000e100 	.word	0xe000e100

08000624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	46de      	mov	lr, fp
 8000628:	4657      	mov	r7, sl
 800062a:	464e      	mov	r6, r9
 800062c:	4645      	mov	r5, r8
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000632:	6809      	ldr	r1, [r1, #0]
 8000634:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000636:	2300      	movs	r3, #0
{
 8000638:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800063a:	2900      	cmp	r1, #0
 800063c:	d07c      	beq.n	8000738 <HAL_GPIO_Init+0x114>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4c79      	ldr	r4, [pc, #484]	; (8000824 <HAL_GPIO_Init+0x200>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000640:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000642:	46a3      	mov	fp, r4
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000644:	2601      	movs	r6, #1
 8000646:	000c      	movs	r4, r1
 8000648:	409e      	lsls	r6, r3
 800064a:	4034      	ands	r4, r6
 800064c:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 800064e:	4231      	tst	r1, r6
 8000650:	d06c      	beq.n	800072c <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000652:	4654      	mov	r4, sl
 8000654:	2503      	movs	r5, #3
 8000656:	6864      	ldr	r4, [r4, #4]
 8000658:	4025      	ands	r5, r4
 800065a:	46ac      	mov	ip, r5
 800065c:	3d01      	subs	r5, #1
 800065e:	2d01      	cmp	r5, #1
 8000660:	d800      	bhi.n	8000664 <HAL_GPIO_Init+0x40>
 8000662:	e070      	b.n	8000746 <HAL_GPIO_Init+0x122>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000664:	4665      	mov	r5, ip
 8000666:	2d03      	cmp	r5, #3
 8000668:	d000      	beq.n	800066c <HAL_GPIO_Init+0x48>
 800066a:	e0b3      	b.n	80007d4 <HAL_GPIO_Init+0x1b0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800066c:	4666      	mov	r6, ip
 800066e:	4096      	lsls	r6, r2
 8000670:	43f5      	mvns	r5, r6
 8000672:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8000674:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000676:	9d02      	ldr	r5, [sp, #8]
 8000678:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800067a:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800067c:	25c0      	movs	r5, #192	; 0xc0
 800067e:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8000680:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000682:	422c      	tst	r4, r5
 8000684:	d052      	beq.n	800072c <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	465d      	mov	r5, fp
 8000688:	2601      	movs	r6, #1
 800068a:	465f      	mov	r7, fp
 800068c:	69ad      	ldr	r5, [r5, #24]
 800068e:	4335      	orrs	r5, r6
 8000690:	61bd      	str	r5, [r7, #24]
 8000692:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000694:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4035      	ands	r5, r6
 8000698:	4e63      	ldr	r6, [pc, #396]	; (8000828 <HAL_GPIO_Init+0x204>)
 800069a:	9505      	str	r5, [sp, #20]
 800069c:	46b4      	mov	ip, r6
 800069e:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006a0:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 80006a2:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006a4:	00bf      	lsls	r7, r7, #2
 80006a6:	00ad      	lsls	r5, r5, #2
 80006a8:	4465      	add	r5, ip
 80006aa:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 80006ac:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006ae:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 80006b0:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006b2:	4666      	mov	r6, ip
 80006b4:	40b7      	lsls	r7, r6
 80006b6:	003e      	movs	r6, r7
 80006b8:	464f      	mov	r7, r9
 80006ba:	43b7      	bics	r7, r6
 80006bc:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006be:	2790      	movs	r7, #144	; 0x90
 80006c0:	05ff      	lsls	r7, r7, #23
 80006c2:	42b8      	cmp	r0, r7
 80006c4:	d012      	beq.n	80006ec <HAL_GPIO_Init+0xc8>
 80006c6:	4f59      	ldr	r7, [pc, #356]	; (800082c <HAL_GPIO_Init+0x208>)
 80006c8:	42b8      	cmp	r0, r7
 80006ca:	d100      	bne.n	80006ce <HAL_GPIO_Init+0xaa>
 80006cc:	e09b      	b.n	8000806 <HAL_GPIO_Init+0x1e2>
 80006ce:	4f58      	ldr	r7, [pc, #352]	; (8000830 <HAL_GPIO_Init+0x20c>)
 80006d0:	42b8      	cmp	r0, r7
 80006d2:	d100      	bne.n	80006d6 <HAL_GPIO_Init+0xb2>
 80006d4:	e09f      	b.n	8000816 <HAL_GPIO_Init+0x1f2>
 80006d6:	4f57      	ldr	r7, [pc, #348]	; (8000834 <HAL_GPIO_Init+0x210>)
 80006d8:	42b8      	cmp	r0, r7
 80006da:	d100      	bne.n	80006de <HAL_GPIO_Init+0xba>
 80006dc:	e08c      	b.n	80007f8 <HAL_GPIO_Init+0x1d4>
 80006de:	4666      	mov	r6, ip
 80006e0:	2705      	movs	r7, #5
 80006e2:	40b7      	lsls	r7, r6
 80006e4:	003e      	movs	r6, r7
 80006e6:	464f      	mov	r7, r9
 80006e8:	4337      	orrs	r7, r6
 80006ea:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006ec:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80006ee:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006f0:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 80006f2:	4d51      	ldr	r5, [pc, #324]	; (8000838 <HAL_GPIO_Init+0x214>)
        temp &= ~(iocurrent);
 80006f4:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80006f6:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 80006f8:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 80006fa:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80006fc:	423c      	tst	r4, r7
 80006fe:	d000      	beq.n	8000702 <HAL_GPIO_Init+0xde>
 8000700:	e077      	b.n	80007f2 <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 8000702:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000704:	4f4c      	ldr	r7, [pc, #304]	; (8000838 <HAL_GPIO_Init+0x214>)
 8000706:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8000708:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800070a:	02a7      	lsls	r7, r4, #10
 800070c:	d46e      	bmi.n	80007ec <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 800070e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000710:	4f49      	ldr	r7, [pc, #292]	; (8000838 <HAL_GPIO_Init+0x214>)
 8000712:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000714:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000716:	03a7      	lsls	r7, r4, #14
 8000718:	d465      	bmi.n	80007e6 <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 800071a:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800071c:	4f46      	ldr	r7, [pc, #280]	; (8000838 <HAL_GPIO_Init+0x214>)
 800071e:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8000720:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000722:	03e4      	lsls	r4, r4, #15
 8000724:	d45b      	bmi.n	80007de <HAL_GPIO_Init+0x1ba>
        temp &= ~(iocurrent);
 8000726:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000728:	4c43      	ldr	r4, [pc, #268]	; (8000838 <HAL_GPIO_Init+0x214>)
 800072a:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800072c:	000c      	movs	r4, r1
      }
    }

    position++;
 800072e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000730:	40dc      	lsrs	r4, r3
 8000732:	3202      	adds	r2, #2
 8000734:	2c00      	cmp	r4, #0
 8000736:	d185      	bne.n	8000644 <HAL_GPIO_Init+0x20>
  } 
}
 8000738:	b007      	add	sp, #28
 800073a:	bcf0      	pop	{r4, r5, r6, r7}
 800073c:	46bb      	mov	fp, r7
 800073e:	46b2      	mov	sl, r6
 8000740:	46a9      	mov	r9, r5
 8000742:	46a0      	mov	r8, r4
 8000744:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000746:	6885      	ldr	r5, [r0, #8]
 8000748:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800074a:	2503      	movs	r5, #3
 800074c:	4095      	lsls	r5, r2
 800074e:	46a8      	mov	r8, r5
 8000750:	43ed      	mvns	r5, r5
 8000752:	464f      	mov	r7, r9
 8000754:	9502      	str	r5, [sp, #8]
 8000756:	4645      	mov	r5, r8
 8000758:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800075a:	4655      	mov	r5, sl
 800075c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800075e:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000760:	002f      	movs	r7, r5
 8000762:	4097      	lsls	r7, r2
 8000764:	46b8      	mov	r8, r7
 8000766:	464f      	mov	r7, r9
 8000768:	4645      	mov	r5, r8
 800076a:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800076c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800076e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000770:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000772:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000774:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000776:	0926      	lsrs	r6, r4, #4
 8000778:	402e      	ands	r6, r5
 800077a:	409e      	lsls	r6, r3
 800077c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800077e:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000780:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000782:	9d02      	ldr	r5, [sp, #8]
 8000784:	402e      	ands	r6, r5
 8000786:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000788:	4656      	mov	r6, sl
 800078a:	68b6      	ldr	r6, [r6, #8]
 800078c:	4647      	mov	r7, r8
 800078e:	4096      	lsls	r6, r2
 8000790:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8000792:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000794:	4667      	mov	r7, ip
 8000796:	4666      	mov	r6, ip
 8000798:	4096      	lsls	r6, r2
 800079a:	2f02      	cmp	r7, #2
 800079c:	d000      	beq.n	80007a0 <HAL_GPIO_Init+0x17c>
 800079e:	e769      	b.n	8000674 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 80007a0:	08dd      	lsrs	r5, r3, #3
 80007a2:	00ad      	lsls	r5, r5, #2
 80007a4:	46ac      	mov	ip, r5
 80007a6:	4484      	add	ip, r0
 80007a8:	4665      	mov	r5, ip
 80007aa:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007ac:	2507      	movs	r5, #7
 80007ae:	401d      	ands	r5, r3
 80007b0:	00ad      	lsls	r5, r5, #2
 80007b2:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 80007b4:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007b6:	250f      	movs	r5, #15
 80007b8:	4647      	mov	r7, r8
 80007ba:	40bd      	lsls	r5, r7
 80007bc:	9f03      	ldr	r7, [sp, #12]
 80007be:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007c0:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007c2:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007c4:	4647      	mov	r7, r8
 80007c6:	692d      	ldr	r5, [r5, #16]
 80007c8:	40bd      	lsls	r5, r7
 80007ca:	9f03      	ldr	r7, [sp, #12]
 80007cc:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80007ce:	4665      	mov	r5, ip
 80007d0:	622f      	str	r7, [r5, #32]
 80007d2:	e74f      	b.n	8000674 <HAL_GPIO_Init+0x50>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007d4:	2503      	movs	r5, #3
 80007d6:	4095      	lsls	r5, r2
 80007d8:	43ed      	mvns	r5, r5
 80007da:	9502      	str	r5, [sp, #8]
 80007dc:	e7d0      	b.n	8000780 <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 80007de:	9c01      	ldr	r4, [sp, #4]
 80007e0:	432c      	orrs	r4, r5
 80007e2:	0025      	movs	r5, r4
 80007e4:	e7a0      	b.n	8000728 <HAL_GPIO_Init+0x104>
          temp |= iocurrent;
 80007e6:	9f01      	ldr	r7, [sp, #4]
 80007e8:	433d      	orrs	r5, r7
 80007ea:	e797      	b.n	800071c <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 80007ec:	9f01      	ldr	r7, [sp, #4]
 80007ee:	433d      	orrs	r5, r7
 80007f0:	e78e      	b.n	8000710 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 80007f2:	9f01      	ldr	r7, [sp, #4]
 80007f4:	433d      	orrs	r5, r7
 80007f6:	e785      	b.n	8000704 <HAL_GPIO_Init+0xe0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007f8:	4667      	mov	r7, ip
 80007fa:	2603      	movs	r6, #3
 80007fc:	40be      	lsls	r6, r7
 80007fe:	464f      	mov	r7, r9
 8000800:	4337      	orrs	r7, r6
 8000802:	46b9      	mov	r9, r7
 8000804:	e772      	b.n	80006ec <HAL_GPIO_Init+0xc8>
 8000806:	4666      	mov	r6, ip
 8000808:	2701      	movs	r7, #1
 800080a:	40b7      	lsls	r7, r6
 800080c:	003e      	movs	r6, r7
 800080e:	464f      	mov	r7, r9
 8000810:	4337      	orrs	r7, r6
 8000812:	46b9      	mov	r9, r7
 8000814:	e76a      	b.n	80006ec <HAL_GPIO_Init+0xc8>
 8000816:	4667      	mov	r7, ip
 8000818:	2602      	movs	r6, #2
 800081a:	40be      	lsls	r6, r7
 800081c:	464f      	mov	r7, r9
 800081e:	4337      	orrs	r7, r6
 8000820:	46b9      	mov	r9, r7
 8000822:	e763      	b.n	80006ec <HAL_GPIO_Init+0xc8>
 8000824:	40021000 	.word	0x40021000
 8000828:	40010000 	.word	0x40010000
 800082c:	48000400 	.word	0x48000400
 8000830:	48000800 	.word	0x48000800
 8000834:	48000c00 	.word	0x48000c00
 8000838:	40010400 	.word	0x40010400

0800083c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800083c:	2a00      	cmp	r2, #0
 800083e:	d001      	beq.n	8000844 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000840:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000842:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000844:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000846:	e7fc      	b.n	8000842 <HAL_GPIO_WritePin+0x6>

08000848 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000848:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800084a:	0013      	movs	r3, r2
 800084c:	400b      	ands	r3, r1
 800084e:	041b      	lsls	r3, r3, #16
 8000850:	4391      	bics	r1, r2
 8000852:	430b      	orrs	r3, r1
 8000854:	6183      	str	r3, [r0, #24]
}
 8000856:	4770      	bx	lr

08000858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	46ce      	mov	lr, r9
 800085c:	4647      	mov	r7, r8
 800085e:	b580      	push	{r7, lr}
 8000860:	0004      	movs	r4, r0
 8000862:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000864:	2800      	cmp	r0, #0
 8000866:	d100      	bne.n	800086a <HAL_RCC_OscConfig+0x12>
 8000868:	e0ee      	b.n	8000a48 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800086a:	6803      	ldr	r3, [r0, #0]
 800086c:	07da      	lsls	r2, r3, #31
 800086e:	d535      	bpl.n	80008dc <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000870:	210c      	movs	r1, #12
 8000872:	48c3      	ldr	r0, [pc, #780]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 8000874:	6842      	ldr	r2, [r0, #4]
 8000876:	400a      	ands	r2, r1
 8000878:	2a04      	cmp	r2, #4
 800087a:	d100      	bne.n	800087e <HAL_RCC_OscConfig+0x26>
 800087c:	e101      	b.n	8000a82 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800087e:	6842      	ldr	r2, [r0, #4]
 8000880:	4011      	ands	r1, r2
 8000882:	2908      	cmp	r1, #8
 8000884:	d100      	bne.n	8000888 <HAL_RCC_OscConfig+0x30>
 8000886:	e0f8      	b.n	8000a7a <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000888:	6863      	ldr	r3, [r4, #4]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d00f      	beq.n	80008ae <HAL_RCC_OscConfig+0x56>
 800088e:	2b00      	cmp	r3, #0
 8000890:	d100      	bne.n	8000894 <HAL_RCC_OscConfig+0x3c>
 8000892:	e11e      	b.n	8000ad2 <HAL_RCC_OscConfig+0x27a>
 8000894:	2b05      	cmp	r3, #5
 8000896:	d100      	bne.n	800089a <HAL_RCC_OscConfig+0x42>
 8000898:	e1a7      	b.n	8000bea <HAL_RCC_OscConfig+0x392>
 800089a:	4bb9      	ldr	r3, [pc, #740]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 800089c:	49b9      	ldr	r1, [pc, #740]	; (8000b84 <HAL_RCC_OscConfig+0x32c>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	400a      	ands	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	49b8      	ldr	r1, [pc, #736]	; (8000b88 <HAL_RCC_OscConfig+0x330>)
 80008a8:	400a      	ands	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	e005      	b.n	80008ba <HAL_RCC_OscConfig+0x62>
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	4ab3      	ldr	r2, [pc, #716]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 80008b2:	025b      	lsls	r3, r3, #9
 80008b4:	6811      	ldr	r1, [r2, #0]
 80008b6:	430b      	orrs	r3, r1
 80008b8:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ba:	f7ff fe6f 	bl	800059c <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008be:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80008c0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c2:	4faf      	ldr	r7, [pc, #700]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 80008c4:	02b6      	lsls	r6, r6, #10
 80008c6:	e005      	b.n	80008d4 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008c8:	f7ff fe68 	bl	800059c <HAL_GetTick>
 80008cc:	1b40      	subs	r0, r0, r5
 80008ce:	2864      	cmp	r0, #100	; 0x64
 80008d0:	d900      	bls.n	80008d4 <HAL_RCC_OscConfig+0x7c>
 80008d2:	e0fc      	b.n	8000ace <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4233      	tst	r3, r6
 80008d8:	d0f6      	beq.n	80008c8 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	079a      	lsls	r2, r3, #30
 80008de:	d529      	bpl.n	8000934 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008e0:	220c      	movs	r2, #12
 80008e2:	49a7      	ldr	r1, [pc, #668]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 80008e4:	6848      	ldr	r0, [r1, #4]
 80008e6:	4202      	tst	r2, r0
 80008e8:	d100      	bne.n	80008ec <HAL_RCC_OscConfig+0x94>
 80008ea:	e0a6      	b.n	8000a3a <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008ec:	6848      	ldr	r0, [r1, #4]
 80008ee:	4002      	ands	r2, r0
 80008f0:	2a08      	cmp	r2, #8
 80008f2:	d100      	bne.n	80008f6 <HAL_RCC_OscConfig+0x9e>
 80008f4:	e09d      	b.n	8000a32 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008f6:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008f8:	4da1      	ldr	r5, [pc, #644]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d100      	bne.n	8000900 <HAL_RCC_OscConfig+0xa8>
 80008fe:	e11f      	b.n	8000b40 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8000900:	2201      	movs	r2, #1
 8000902:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000904:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000906:	4313      	orrs	r3, r2
 8000908:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800090a:	f7ff fe47 	bl	800059c <HAL_GetTick>
 800090e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000910:	e005      	b.n	800091e <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000912:	f7ff fe43 	bl	800059c <HAL_GetTick>
 8000916:	1b80      	subs	r0, r0, r6
 8000918:	2802      	cmp	r0, #2
 800091a:	d900      	bls.n	800091e <HAL_RCC_OscConfig+0xc6>
 800091c:	e0d7      	b.n	8000ace <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800091e:	682b      	ldr	r3, [r5, #0]
 8000920:	421f      	tst	r7, r3
 8000922:	d0f6      	beq.n	8000912 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000924:	21f8      	movs	r1, #248	; 0xf8
 8000926:	682a      	ldr	r2, [r5, #0]
 8000928:	6923      	ldr	r3, [r4, #16]
 800092a:	438a      	bics	r2, r1
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	4313      	orrs	r3, r2
 8000930:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	071a      	lsls	r2, r3, #28
 8000936:	d42d      	bmi.n	8000994 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000938:	075a      	lsls	r2, r3, #29
 800093a:	d544      	bpl.n	80009c6 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800093c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800093e:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000940:	4b8f      	ldr	r3, [pc, #572]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 8000942:	0552      	lsls	r2, r2, #21
 8000944:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000946:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000948:	4211      	tst	r1, r2
 800094a:	d108      	bne.n	800095e <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	69d9      	ldr	r1, [r3, #28]
 800094e:	4311      	orrs	r1, r2
 8000950:	61d9      	str	r1, [r3, #28]
 8000952:	69db      	ldr	r3, [r3, #28]
 8000954:	4013      	ands	r3, r2
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800095a:	2301      	movs	r3, #1
 800095c:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800095e:	2780      	movs	r7, #128	; 0x80
 8000960:	4e8a      	ldr	r6, [pc, #552]	; (8000b8c <HAL_RCC_OscConfig+0x334>)
 8000962:	007f      	lsls	r7, r7, #1
 8000964:	6833      	ldr	r3, [r6, #0]
 8000966:	423b      	tst	r3, r7
 8000968:	d100      	bne.n	800096c <HAL_RCC_OscConfig+0x114>
 800096a:	e094      	b.n	8000a96 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800096c:	68a3      	ldr	r3, [r4, #8]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d100      	bne.n	8000974 <HAL_RCC_OscConfig+0x11c>
 8000972:	e0f8      	b.n	8000b66 <HAL_RCC_OscConfig+0x30e>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <HAL_RCC_OscConfig+0x122>
 8000978:	e0c4      	b.n	8000b04 <HAL_RCC_OscConfig+0x2ac>
 800097a:	2b05      	cmp	r3, #5
 800097c:	d100      	bne.n	8000980 <HAL_RCC_OscConfig+0x128>
 800097e:	e140      	b.n	8000c02 <HAL_RCC_OscConfig+0x3aa>
 8000980:	2101      	movs	r1, #1
 8000982:	4b7f      	ldr	r3, [pc, #508]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 8000984:	6a1a      	ldr	r2, [r3, #32]
 8000986:	438a      	bics	r2, r1
 8000988:	621a      	str	r2, [r3, #32]
 800098a:	6a1a      	ldr	r2, [r3, #32]
 800098c:	3103      	adds	r1, #3
 800098e:	438a      	bics	r2, r1
 8000990:	621a      	str	r2, [r3, #32]
 8000992:	e0ec      	b.n	8000b6e <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000994:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8000996:	4d7a      	ldr	r5, [pc, #488]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000998:	2b00      	cmp	r3, #0
 800099a:	d05b      	beq.n	8000a54 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 800099c:	2201      	movs	r2, #1
 800099e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80009a2:	4313      	orrs	r3, r2
 80009a4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80009a6:	f7ff fdf9 	bl	800059c <HAL_GetTick>
 80009aa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ac:	e005      	b.n	80009ba <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ae:	f7ff fdf5 	bl	800059c <HAL_GetTick>
 80009b2:	1b80      	subs	r0, r0, r6
 80009b4:	2802      	cmp	r0, #2
 80009b6:	d900      	bls.n	80009ba <HAL_RCC_OscConfig+0x162>
 80009b8:	e089      	b.n	8000ace <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80009bc:	421f      	tst	r7, r3
 80009be:	d0f6      	beq.n	80009ae <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	075a      	lsls	r2, r3, #29
 80009c4:	d4ba      	bmi.n	800093c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80009c6:	06db      	lsls	r3, r3, #27
 80009c8:	d512      	bpl.n	80009f0 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80009ca:	6963      	ldr	r3, [r4, #20]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d100      	bne.n	80009d2 <HAL_RCC_OscConfig+0x17a>
 80009d0:	e13d      	b.n	8000c4e <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80009d2:	3305      	adds	r3, #5
 80009d4:	d000      	beq.n	80009d8 <HAL_RCC_OscConfig+0x180>
 80009d6:	e0e9      	b.n	8000bac <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80009d8:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80009da:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80009dc:	4a68      	ldr	r2, [pc, #416]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 80009de:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80009e0:	438b      	bics	r3, r1
 80009e2:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80009e4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80009e6:	69a3      	ldr	r3, [r4, #24]
 80009e8:	4381      	bics	r1, r0
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	430b      	orrs	r3, r1
 80009ee:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009f0:	6a23      	ldr	r3, [r4, #32]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d01b      	beq.n	8000a2e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009f6:	220c      	movs	r2, #12
 80009f8:	4d61      	ldr	r5, [pc, #388]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 80009fa:	6869      	ldr	r1, [r5, #4]
 80009fc:	400a      	ands	r2, r1
 80009fe:	2a08      	cmp	r2, #8
 8000a00:	d100      	bne.n	8000a04 <HAL_RCC_OscConfig+0x1ac>
 8000a02:	e108      	b.n	8000c16 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d100      	bne.n	8000a0a <HAL_RCC_OscConfig+0x1b2>
 8000a08:	e13f      	b.n	8000c8a <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a0a:	682b      	ldr	r3, [r5, #0]
 8000a0c:	4a60      	ldr	r2, [pc, #384]	; (8000b90 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a0e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000a10:	4013      	ands	r3, r2
 8000a12:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a14:	f7ff fdc2 	bl	800059c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a18:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8000a1a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a1c:	e004      	b.n	8000a28 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a1e:	f7ff fdbd 	bl	800059c <HAL_GetTick>
 8000a22:	1b00      	subs	r0, r0, r4
 8000a24:	2802      	cmp	r0, #2
 8000a26:	d852      	bhi.n	8000ace <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a28:	682b      	ldr	r3, [r5, #0]
 8000a2a:	4233      	tst	r3, r6
 8000a2c:	d1f7      	bne.n	8000a1e <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8000a2e:	2000      	movs	r0, #0
 8000a30:	e00b      	b.n	8000a4a <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a32:	684a      	ldr	r2, [r1, #4]
 8000a34:	03d2      	lsls	r2, r2, #15
 8000a36:	d500      	bpl.n	8000a3a <HAL_RCC_OscConfig+0x1e2>
 8000a38:	e75d      	b.n	80008f6 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a3a:	4a51      	ldr	r2, [pc, #324]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 8000a3c:	6812      	ldr	r2, [r2, #0]
 8000a3e:	0792      	lsls	r2, r2, #30
 8000a40:	d539      	bpl.n	8000ab6 <HAL_RCC_OscConfig+0x25e>
 8000a42:	68e2      	ldr	r2, [r4, #12]
 8000a44:	2a01      	cmp	r2, #1
 8000a46:	d036      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8000a48:	2001      	movs	r0, #1
}
 8000a4a:	b003      	add	sp, #12
 8000a4c:	bcc0      	pop	{r6, r7}
 8000a4e:	46b9      	mov	r9, r7
 8000a50:	46b0      	mov	r8, r6
 8000a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8000a54:	2201      	movs	r2, #1
 8000a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a58:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000a5a:	4393      	bics	r3, r2
 8000a5c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000a5e:	f7ff fd9d 	bl	800059c <HAL_GetTick>
 8000a62:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a64:	e004      	b.n	8000a70 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a66:	f7ff fd99 	bl	800059c <HAL_GetTick>
 8000a6a:	1b80      	subs	r0, r0, r6
 8000a6c:	2802      	cmp	r0, #2
 8000a6e:	d82e      	bhi.n	8000ace <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000a72:	421f      	tst	r7, r3
 8000a74:	d1f7      	bne.n	8000a66 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	e7a3      	b.n	80009c2 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a7a:	6842      	ldr	r2, [r0, #4]
 8000a7c:	03d2      	lsls	r2, r2, #15
 8000a7e:	d400      	bmi.n	8000a82 <HAL_RCC_OscConfig+0x22a>
 8000a80:	e702      	b.n	8000888 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a82:	4a3f      	ldr	r2, [pc, #252]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	0392      	lsls	r2, r2, #14
 8000a88:	d400      	bmi.n	8000a8c <HAL_RCC_OscConfig+0x234>
 8000a8a:	e727      	b.n	80008dc <HAL_RCC_OscConfig+0x84>
 8000a8c:	6862      	ldr	r2, [r4, #4]
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	d000      	beq.n	8000a94 <HAL_RCC_OscConfig+0x23c>
 8000a92:	e723      	b.n	80008dc <HAL_RCC_OscConfig+0x84>
 8000a94:	e7d8      	b.n	8000a48 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a96:	6833      	ldr	r3, [r6, #0]
 8000a98:	433b      	orrs	r3, r7
 8000a9a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a9c:	f7ff fd7e 	bl	800059c <HAL_GetTick>
 8000aa0:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa2:	e004      	b.n	8000aae <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000aa4:	f7ff fd7a 	bl	800059c <HAL_GetTick>
 8000aa8:	1b40      	subs	r0, r0, r5
 8000aaa:	2864      	cmp	r0, #100	; 0x64
 8000aac:	d80f      	bhi.n	8000ace <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aae:	6833      	ldr	r3, [r6, #0]
 8000ab0:	423b      	tst	r3, r7
 8000ab2:	d0f7      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x24c>
 8000ab4:	e75a      	b.n	800096c <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab6:	25f8      	movs	r5, #248	; 0xf8
 8000ab8:	4831      	ldr	r0, [pc, #196]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 8000aba:	6922      	ldr	r2, [r4, #16]
 8000abc:	6801      	ldr	r1, [r0, #0]
 8000abe:	00d2      	lsls	r2, r2, #3
 8000ac0:	43a9      	bics	r1, r5
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ac6:	071a      	lsls	r2, r3, #28
 8000ac8:	d400      	bmi.n	8000acc <HAL_RCC_OscConfig+0x274>
 8000aca:	e735      	b.n	8000938 <HAL_RCC_OscConfig+0xe0>
 8000acc:	e762      	b.n	8000994 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8000ace:	2003      	movs	r0, #3
 8000ad0:	e7bb      	b.n	8000a4a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad2:	4d2b      	ldr	r5, [pc, #172]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 8000ad4:	4a2b      	ldr	r2, [pc, #172]	; (8000b84 <HAL_RCC_OscConfig+0x32c>)
 8000ad6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ad8:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ada:	4013      	ands	r3, r2
 8000adc:	602b      	str	r3, [r5, #0]
 8000ade:	682b      	ldr	r3, [r5, #0]
 8000ae0:	4a29      	ldr	r2, [pc, #164]	; (8000b88 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ae2:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ae8:	f7ff fd58 	bl	800059c <HAL_GetTick>
 8000aec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aee:	e004      	b.n	8000afa <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000af0:	f7ff fd54 	bl	800059c <HAL_GetTick>
 8000af4:	1b80      	subs	r0, r0, r6
 8000af6:	2864      	cmp	r0, #100	; 0x64
 8000af8:	d8e9      	bhi.n	8000ace <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000afa:	682b      	ldr	r3, [r5, #0]
 8000afc:	423b      	tst	r3, r7
 8000afe:	d1f7      	bne.n	8000af0 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	e6eb      	b.n	80008dc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b04:	2201      	movs	r2, #1
 8000b06:	4e1e      	ldr	r6, [pc, #120]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b08:	4d22      	ldr	r5, [pc, #136]	; (8000b94 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0a:	6a33      	ldr	r3, [r6, #32]
 8000b0c:	4393      	bics	r3, r2
 8000b0e:	6233      	str	r3, [r6, #32]
 8000b10:	6a33      	ldr	r3, [r6, #32]
 8000b12:	3203      	adds	r2, #3
 8000b14:	4393      	bics	r3, r2
 8000b16:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000b18:	f7ff fd40 	bl	800059c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1c:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8000b1e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b20:	4698      	mov	r8, r3
 8000b22:	e004      	b.n	8000b2e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b24:	f7ff fd3a 	bl	800059c <HAL_GetTick>
 8000b28:	1bc0      	subs	r0, r0, r7
 8000b2a:	42a8      	cmp	r0, r5
 8000b2c:	d8cf      	bhi.n	8000ace <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b2e:	4642      	mov	r2, r8
 8000b30:	6a33      	ldr	r3, [r6, #32]
 8000b32:	421a      	tst	r2, r3
 8000b34:	d1f6      	bne.n	8000b24 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8000b36:	464b      	mov	r3, r9
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d04f      	beq.n	8000bdc <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	e742      	b.n	80009c6 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8000b40:	2201      	movs	r2, #1
 8000b42:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b44:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000b46:	4393      	bics	r3, r2
 8000b48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b4a:	f7ff fd27 	bl	800059c <HAL_GetTick>
 8000b4e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b50:	e004      	b.n	8000b5c <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b52:	f7ff fd23 	bl	800059c <HAL_GetTick>
 8000b56:	1b80      	subs	r0, r0, r6
 8000b58:	2802      	cmp	r0, #2
 8000b5a:	d8b8      	bhi.n	8000ace <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	421f      	tst	r7, r3
 8000b60:	d1f7      	bne.n	8000b52 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	e6e6      	b.n	8000934 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b66:	4906      	ldr	r1, [pc, #24]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
 8000b68:	6a0a      	ldr	r2, [r1, #32]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000b6e:	f7ff fd15 	bl	800059c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b72:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8000b74:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b76:	4698      	mov	r8, r3
 8000b78:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b7a:	4d06      	ldr	r5, [pc, #24]	; (8000b94 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b7c:	e011      	b.n	8000ba2 <HAL_RCC_OscConfig+0x34a>
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40021000 	.word	0x40021000
 8000b84:	fffeffff 	.word	0xfffeffff
 8000b88:	fffbffff 	.word	0xfffbffff
 8000b8c:	40007000 	.word	0x40007000
 8000b90:	feffffff 	.word	0xfeffffff
 8000b94:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b98:	f7ff fd00 	bl	800059c <HAL_GetTick>
 8000b9c:	1b80      	subs	r0, r0, r6
 8000b9e:	42a8      	cmp	r0, r5
 8000ba0:	d895      	bhi.n	8000ace <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba2:	4643      	mov	r3, r8
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	421f      	tst	r7, r3
 8000ba8:	d0f6      	beq.n	8000b98 <HAL_RCC_OscConfig+0x340>
 8000baa:	e7c4      	b.n	8000b36 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bac:	2204      	movs	r2, #4
 8000bae:	4d53      	ldr	r5, [pc, #332]	; (8000cfc <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bb0:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bb2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000bb8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bba:	3a03      	subs	r2, #3
 8000bbc:	4393      	bics	r3, r2
 8000bbe:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000bc0:	f7ff fcec 	bl	800059c <HAL_GetTick>
 8000bc4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bc6:	e005      	b.n	8000bd4 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bc8:	f7ff fce8 	bl	800059c <HAL_GetTick>
 8000bcc:	1b80      	subs	r0, r0, r6
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d900      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x37c>
 8000bd2:	e77c      	b.n	8000ace <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bd4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bd6:	421f      	tst	r7, r3
 8000bd8:	d1f6      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x370>
 8000bda:	e709      	b.n	80009f0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bdc:	4a47      	ldr	r2, [pc, #284]	; (8000cfc <HAL_RCC_OscConfig+0x4a4>)
 8000bde:	4948      	ldr	r1, [pc, #288]	; (8000d00 <HAL_RCC_OscConfig+0x4a8>)
 8000be0:	69d3      	ldr	r3, [r2, #28]
 8000be2:	400b      	ands	r3, r1
 8000be4:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	e6ed      	b.n	80009c6 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	4b43      	ldr	r3, [pc, #268]	; (8000cfc <HAL_RCC_OscConfig+0x4a4>)
 8000bee:	02d2      	lsls	r2, r2, #11
 8000bf0:	6819      	ldr	r1, [r3, #0]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	6819      	ldr	r1, [r3, #0]
 8000bfa:	0252      	lsls	r2, r2, #9
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e65b      	b.n	80008ba <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c02:	2104      	movs	r1, #4
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <HAL_RCC_OscConfig+0x4a4>)
 8000c06:	6a1a      	ldr	r2, [r3, #32]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	621a      	str	r2, [r3, #32]
 8000c0c:	6a1a      	ldr	r2, [r3, #32]
 8000c0e:	3903      	subs	r1, #3
 8000c10:	430a      	orrs	r2, r1
 8000c12:	621a      	str	r2, [r3, #32]
 8000c14:	e7ab      	b.n	8000b6e <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d100      	bne.n	8000c1c <HAL_RCC_OscConfig+0x3c4>
 8000c1a:	e715      	b.n	8000a48 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c1c:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8000c1e:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c22:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8000c24:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8000c26:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c28:	4013      	ands	r3, r2
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d000      	beq.n	8000c30 <HAL_RCC_OscConfig+0x3d8>
 8000c2e:	e70c      	b.n	8000a4a <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c30:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c32:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c34:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d000      	beq.n	8000c3c <HAL_RCC_OscConfig+0x3e4>
 8000c3a:	e706      	b.n	8000a4a <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000c3c:	23f0      	movs	r3, #240	; 0xf0
 8000c3e:	039b      	lsls	r3, r3, #14
 8000c40:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c44:	1ad2      	subs	r2, r2, r3
 8000c46:	1e53      	subs	r3, r2, #1
 8000c48:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 8000c4a:	b2d0      	uxtb	r0, r2
 8000c4c:	e6fd      	b.n	8000a4a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c4e:	2104      	movs	r1, #4
 8000c50:	4d2a      	ldr	r5, [pc, #168]	; (8000cfc <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c52:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c54:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c56:	430a      	orrs	r2, r1
 8000c58:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000c5a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c60:	f7ff fc9c 	bl	800059c <HAL_GetTick>
 8000c64:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c66:	e005      	b.n	8000c74 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c68:	f7ff fc98 	bl	800059c <HAL_GetTick>
 8000c6c:	1b80      	subs	r0, r0, r6
 8000c6e:	2802      	cmp	r0, #2
 8000c70:	d900      	bls.n	8000c74 <HAL_RCC_OscConfig+0x41c>
 8000c72:	e72c      	b.n	8000ace <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c74:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c76:	421f      	tst	r7, r3
 8000c78:	d0f6      	beq.n	8000c68 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c7a:	21f8      	movs	r1, #248	; 0xf8
 8000c7c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c7e:	69a3      	ldr	r3, [r4, #24]
 8000c80:	438a      	bics	r2, r1
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	636b      	str	r3, [r5, #52]	; 0x34
 8000c88:	e6b2      	b.n	80009f0 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8000c8a:	682b      	ldr	r3, [r5, #0]
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c8e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000c90:	4013      	ands	r3, r2
 8000c92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c94:	f7ff fc82 	bl	800059c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c98:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8000c9a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c9c:	e005      	b.n	8000caa <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c9e:	f7ff fc7d 	bl	800059c <HAL_GetTick>
 8000ca2:	1b80      	subs	r0, r0, r6
 8000ca4:	2802      	cmp	r0, #2
 8000ca6:	d900      	bls.n	8000caa <HAL_RCC_OscConfig+0x452>
 8000ca8:	e711      	b.n	8000ace <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000caa:	682b      	ldr	r3, [r5, #0]
 8000cac:	423b      	tst	r3, r7
 8000cae:	d1f6      	bne.n	8000c9e <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cb4:	4e11      	ldr	r6, [pc, #68]	; (8000cfc <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cb6:	4393      	bics	r3, r2
 8000cb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000cbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000cc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cc2:	686a      	ldr	r2, [r5, #4]
 8000cc4:	430b      	orrs	r3, r1
 8000cc6:	4910      	ldr	r1, [pc, #64]	; (8000d08 <HAL_RCC_OscConfig+0x4b0>)
 8000cc8:	400a      	ands	r2, r1
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	682a      	ldr	r2, [r5, #0]
 8000cd2:	045b      	lsls	r3, r3, #17
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fc60 	bl	800059c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cdc:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000cde:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ce0:	04ad      	lsls	r5, r5, #18
 8000ce2:	e005      	b.n	8000cf0 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ce4:	f7ff fc5a 	bl	800059c <HAL_GetTick>
 8000ce8:	1b00      	subs	r0, r0, r4
 8000cea:	2802      	cmp	r0, #2
 8000cec:	d900      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x498>
 8000cee:	e6ee      	b.n	8000ace <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cf0:	6833      	ldr	r3, [r6, #0]
 8000cf2:	422b      	tst	r3, r5
 8000cf4:	d0f6      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	e6a7      	b.n	8000a4a <HAL_RCC_OscConfig+0x1f2>
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	efffffff 	.word	0xefffffff
 8000d04:	feffffff 	.word	0xfeffffff
 8000d08:	ffc2ffff 	.word	0xffc2ffff

08000d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0e:	46ce      	mov	lr, r9
 8000d10:	4647      	mov	r7, r8
 8000d12:	0004      	movs	r4, r0
 8000d14:	000d      	movs	r5, r1
 8000d16:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d00d      	beq.n	8000d38 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	494f      	ldr	r1, [pc, #316]	; (8000e5c <HAL_RCC_ClockConfig+0x150>)
 8000d20:	680a      	ldr	r2, [r1, #0]
 8000d22:	401a      	ands	r2, r3
 8000d24:	42aa      	cmp	r2, r5
 8000d26:	d20c      	bcs.n	8000d42 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d28:	680a      	ldr	r2, [r1, #0]
 8000d2a:	439a      	bics	r2, r3
 8000d2c:	432a      	orrs	r2, r5
 8000d2e:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d30:	680a      	ldr	r2, [r1, #0]
 8000d32:	4013      	ands	r3, r2
 8000d34:	42ab      	cmp	r3, r5
 8000d36:	d004      	beq.n	8000d42 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8000d38:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8000d3a:	bcc0      	pop	{r6, r7}
 8000d3c:	46b9      	mov	r9, r7
 8000d3e:	46b0      	mov	r8, r6
 8000d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	079a      	lsls	r2, r3, #30
 8000d46:	d50e      	bpl.n	8000d66 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d48:	075a      	lsls	r2, r3, #29
 8000d4a:	d505      	bpl.n	8000d58 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000d4c:	22e0      	movs	r2, #224	; 0xe0
 8000d4e:	4944      	ldr	r1, [pc, #272]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
 8000d50:	00d2      	lsls	r2, r2, #3
 8000d52:	6848      	ldr	r0, [r1, #4]
 8000d54:	4302      	orrs	r2, r0
 8000d56:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d58:	20f0      	movs	r0, #240	; 0xf0
 8000d5a:	4941      	ldr	r1, [pc, #260]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
 8000d5c:	684a      	ldr	r2, [r1, #4]
 8000d5e:	4382      	bics	r2, r0
 8000d60:	68a0      	ldr	r0, [r4, #8]
 8000d62:	4302      	orrs	r2, r0
 8000d64:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d66:	07db      	lsls	r3, r3, #31
 8000d68:	d522      	bpl.n	8000db0 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6a:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d6c:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d70:	2a01      	cmp	r2, #1
 8000d72:	d065      	beq.n	8000e40 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d74:	2a02      	cmp	r2, #2
 8000d76:	d060      	beq.n	8000e3a <HAL_RCC_ClockConfig+0x12e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	079b      	lsls	r3, r3, #30
 8000d7a:	d5dd      	bpl.n	8000d38 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	4e38      	ldr	r6, [pc, #224]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
 8000d80:	6873      	ldr	r3, [r6, #4]
 8000d82:	438b      	bics	r3, r1
 8000d84:	4313      	orrs	r3, r2
 8000d86:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d88:	f7ff fc08 	bl	800059c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d90:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <HAL_RCC_ClockConfig+0x158>)
    tickstart = HAL_GetTick();
 8000d92:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d94:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d96:	e004      	b.n	8000da2 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d98:	f7ff fc00 	bl	800059c <HAL_GetTick>
 8000d9c:	1bc0      	subs	r0, r0, r7
 8000d9e:	4548      	cmp	r0, r9
 8000da0:	d851      	bhi.n	8000e46 <HAL_RCC_ClockConfig+0x13a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000da2:	4643      	mov	r3, r8
 8000da4:	6872      	ldr	r2, [r6, #4]
 8000da6:	401a      	ands	r2, r3
 8000da8:	6863      	ldr	r3, [r4, #4]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d1f3      	bne.n	8000d98 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000db0:	2101      	movs	r1, #1
 8000db2:	4a2a      	ldr	r2, [pc, #168]	; (8000e5c <HAL_RCC_ClockConfig+0x150>)
 8000db4:	6813      	ldr	r3, [r2, #0]
 8000db6:	400b      	ands	r3, r1
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d905      	bls.n	8000dc8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dbc:	6813      	ldr	r3, [r2, #0]
 8000dbe:	438b      	bics	r3, r1
 8000dc0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	4219      	tst	r1, r3
 8000dc6:	d1b7      	bne.n	8000d38 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	075b      	lsls	r3, r3, #29
 8000dcc:	d416      	bmi.n	8000dfc <HAL_RCC_ClockConfig+0xf0>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000dce:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000dd0:	4923      	ldr	r1, [pc, #140]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
 8000dd2:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d01d      	beq.n	8000e16 <HAL_RCC_ClockConfig+0x10a>
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d01d      	beq.n	8000e1a <HAL_RCC_ClockConfig+0x10e>
 8000dde:	4822      	ldr	r0, [pc, #136]	; (8000e68 <HAL_RCC_ClockConfig+0x15c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
 8000de2:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <HAL_RCC_ClockConfig+0x160>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	4922      	ldr	r1, [pc, #136]	; (8000e70 <HAL_RCC_ClockConfig+0x164>)
 8000de8:	061b      	lsls	r3, r3, #24
 8000dea:	0f1b      	lsrs	r3, r3, #28
 8000dec:	5cd3      	ldrb	r3, [r2, r3]
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f7ff fb2e 	bl	8000454 <HAL_InitTick>
  return HAL_OK;
 8000df8:	2000      	movs	r0, #0
 8000dfa:	e79e      	b.n	8000d3a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000dfc:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
 8000dfe:	491d      	ldr	r1, [pc, #116]	; (8000e74 <HAL_RCC_ClockConfig+0x168>)
 8000e00:	6853      	ldr	r3, [r2, #4]
 8000e02:	400b      	ands	r3, r1
 8000e04:	68e1      	ldr	r1, [r4, #12]
 8000e06:	430b      	orrs	r3, r1
 8000e08:	6053      	str	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e0a:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000e0c:	4914      	ldr	r1, [pc, #80]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
 8000e0e:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d1e1      	bne.n	8000dda <HAL_RCC_ClockConfig+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e16:	4818      	ldr	r0, [pc, #96]	; (8000e78 <HAL_RCC_ClockConfig+0x16c>)
 8000e18:	e7e2      	b.n	8000de0 <HAL_RCC_ClockConfig+0xd4>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e1a:	250f      	movs	r5, #15
 8000e1c:	4817      	ldr	r0, [pc, #92]	; (8000e7c <HAL_RCC_ClockConfig+0x170>)
 8000e1e:	0c93      	lsrs	r3, r2, #18
 8000e20:	402b      	ands	r3, r5
 8000e22:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e24:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000e26:	03d2      	lsls	r2, r2, #15
 8000e28:	d50f      	bpl.n	8000e4a <HAL_RCC_ClockConfig+0x13e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_RCC_ClockConfig+0x174>)
 8000e2c:	400d      	ands	r5, r1
 8000e2e:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000e30:	4811      	ldr	r0, [pc, #68]	; (8000e78 <HAL_RCC_ClockConfig+0x16c>)
 8000e32:	f7ff f969 	bl	8000108 <__udivsi3>
 8000e36:	4360      	muls	r0, r4
 8000e38:	e7d2      	b.n	8000de0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e3a:	019b      	lsls	r3, r3, #6
 8000e3c:	d49e      	bmi.n	8000d7c <HAL_RCC_ClockConfig+0x70>
 8000e3e:	e77b      	b.n	8000d38 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e40:	039b      	lsls	r3, r3, #14
 8000e42:	d49b      	bmi.n	8000d7c <HAL_RCC_ClockConfig+0x70>
 8000e44:	e778      	b.n	8000d38 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8000e46:	2003      	movs	r0, #3
 8000e48:	e777      	b.n	8000d3a <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000e4a:	0162      	lsls	r2, r4, #5
 8000e4c:	1b12      	subs	r2, r2, r4
 8000e4e:	0193      	lsls	r3, r2, #6
 8000e50:	1a9b      	subs	r3, r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	191b      	adds	r3, r3, r4
 8000e56:	0218      	lsls	r0, r3, #8
 8000e58:	e7c2      	b.n	8000de0 <HAL_RCC_ClockConfig+0xd4>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	40022000 	.word	0x40022000
 8000e60:	40021000 	.word	0x40021000
 8000e64:	00001388 	.word	0x00001388
 8000e68:	007a1200 	.word	0x007a1200
 8000e6c:	08002888 	.word	0x08002888
 8000e70:	20000000 	.word	0x20000000
 8000e74:	fffff8ff 	.word	0xfffff8ff
 8000e78:	01e84800 	.word	0x01e84800
 8000e7c:	080028a0 	.word	0x080028a0
 8000e80:	080028b0 	.word	0x080028b0

08000e84 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8000e84:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000e86:	4912      	ldr	r1, [pc, #72]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0x4c>)
{
 8000e88:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8000e8a:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d013      	beq.n	8000eba <HAL_RCC_GetSysClockFreq+0x36>
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d10f      	bne.n	8000eb6 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e96:	250f      	movs	r5, #15
 8000e98:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0x50>)
 8000e9a:	0c93      	lsrs	r3, r2, #18
 8000e9c:	402b      	ands	r3, r5
 8000e9e:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000ea0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000ea2:	03d2      	lsls	r2, r2, #15
 8000ea4:	d50b      	bpl.n	8000ebe <HAL_RCC_GetSysClockFreq+0x3a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0x54>)
 8000ea8:	400d      	ands	r5, r1
 8000eaa:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <HAL_RCC_GetSysClockFreq+0x58>)
 8000eae:	f7ff f92b 	bl	8000108 <__udivsi3>
 8000eb2:	4360      	muls	r0, r4
 8000eb4:	e000      	b.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x34>
  switch (tmpreg & RCC_CFGR_SWS)
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000eb8:	bd70      	pop	{r4, r5, r6, pc}
      sysclockfreq = HSE_VALUE;
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <HAL_RCC_GetSysClockFreq+0x58>)
 8000ebc:	e7fc      	b.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x34>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000ebe:	0162      	lsls	r2, r4, #5
 8000ec0:	1b12      	subs	r2, r2, r4
 8000ec2:	0193      	lsls	r3, r2, #6
 8000ec4:	1a9b      	subs	r3, r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	191b      	adds	r3, r3, r4
 8000eca:	0218      	lsls	r0, r3, #8
 8000ecc:	e7f4      	b.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	080028a0 	.word	0x080028a0
 8000ed8:	080028b0 	.word	0x080028b0
 8000edc:	01e84800 	.word	0x01e84800
 8000ee0:	007a1200 	.word	0x007a1200

08000ee4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4905      	ldr	r1, [pc, #20]	; (8000f00 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000eec:	055b      	lsls	r3, r3, #21
 8000eee:	0f5b      	lsrs	r3, r3, #29
 8000ef0:	5ccb      	ldrb	r3, [r1, r3]
 8000ef2:	6810      	ldr	r0, [r2, #0]
 8000ef4:	40d8      	lsrs	r0, r3
}    
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	20000000 	.word	0x20000000
 8000f00:	08002898 	.word	0x08002898

08000f04 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8000f04:	2307      	movs	r3, #7
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f06:	2203      	movs	r2, #3
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8000f08:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_RCC_GetClockConfig+0x30>)
{
 8000f0c:	b510      	push	{r4, lr}
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f0e:	685c      	ldr	r4, [r3, #4]
 8000f10:	4022      	ands	r2, r4
 8000f12:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000f14:	22f0      	movs	r2, #240	; 0xf0
 8000f16:	685c      	ldr	r4, [r3, #4]
 8000f18:	4022      	ands	r2, r4
 8000f1a:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8000f1c:	22e0      	movs	r2, #224	; 0xe0
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	00d2      	lsls	r2, r2, #3
 8000f22:	4013      	ands	r3, r2
 8000f24:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_RCC_GetClockConfig+0x34>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]
}
 8000f30:	bd10      	pop	{r4, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40022000 	.word	0x40022000

08000f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	46ce      	mov	lr, r9
 8000f40:	4647      	mov	r7, r8
 8000f42:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f44:	6803      	ldr	r3, [r0, #0]
{
 8000f46:	0004      	movs	r4, r0
 8000f48:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f4a:	03da      	lsls	r2, r3, #15
 8000f4c:	d530      	bpl.n	8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	4b43      	ldr	r3, [pc, #268]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000f52:	0552      	lsls	r2, r2, #21
 8000f54:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000f56:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f58:	4211      	tst	r1, r2
 8000f5a:	d041      	beq.n	8000fe0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5c:	2680      	movs	r6, #128	; 0x80
 8000f5e:	4d41      	ldr	r5, [pc, #260]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8000f60:	0076      	lsls	r6, r6, #1
 8000f62:	682b      	ldr	r3, [r5, #0]
 8000f64:	4233      	tst	r3, r6
 8000f66:	d049      	beq.n	8000ffc <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000f68:	4d3d      	ldr	r5, [pc, #244]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000f6a:	23c0      	movs	r3, #192	; 0xc0
 8000f6c:	6a2a      	ldr	r2, [r5, #32]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	0010      	movs	r0, r2
 8000f72:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f74:	421a      	tst	r2, r3
 8000f76:	d063      	beq.n	8001040 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8000f78:	6861      	ldr	r1, [r4, #4]
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	4283      	cmp	r3, r0
 8000f7e:	d00e      	beq.n	8000f9e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f80:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f82:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f84:	6a2e      	ldr	r6, [r5, #32]
 8000f86:	0240      	lsls	r0, r0, #9
 8000f88:	4330      	orrs	r0, r6
 8000f8a:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f8c:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f8e:	4a36      	ldr	r2, [pc, #216]	; (8001068 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f90:	4e36      	ldr	r6, [pc, #216]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f92:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f94:	4030      	ands	r0, r6
 8000f96:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000f98:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f9a:	07db      	lsls	r3, r3, #31
 8000f9c:	d43f      	bmi.n	800101e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f9e:	4a30      	ldr	r2, [pc, #192]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000fa0:	4831      	ldr	r0, [pc, #196]	; (8001068 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8000fa2:	6a13      	ldr	r3, [r2, #32]
 8000fa4:	4003      	ands	r3, r0
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000faa:	2f01      	cmp	r7, #1
 8000fac:	d051      	beq.n	8001052 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	07da      	lsls	r2, r3, #31
 8000fb2:	d506      	bpl.n	8000fc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	492a      	ldr	r1, [pc, #168]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000fb8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000fba:	4382      	bics	r2, r0
 8000fbc:	68a0      	ldr	r0, [r4, #8]
 8000fbe:	4302      	orrs	r2, r0
 8000fc0:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000fc2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000fc4:	069b      	lsls	r3, r3, #26
 8000fc6:	d506      	bpl.n	8000fd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000fc8:	2110      	movs	r1, #16
 8000fca:	4a25      	ldr	r2, [pc, #148]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000fcc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fce:	438b      	bics	r3, r1
 8000fd0:	68e1      	ldr	r1, [r4, #12]
 8000fd2:	430b      	orrs	r3, r1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fd6:	b003      	add	sp, #12
 8000fd8:	bcc0      	pop	{r6, r7}
 8000fda:	46b9      	mov	r9, r7
 8000fdc:	46b0      	mov	r8, r6
 8000fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe0:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe4:	4d1f      	ldr	r5, [pc, #124]	; (8001064 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4311      	orrs	r1, r2
 8000fe8:	61d9      	str	r1, [r3, #28]
 8000fea:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fec:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4013      	ands	r3, r2
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff4:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8000ff6:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	4233      	tst	r3, r6
 8000ffa:	d1b5      	bne.n	8000f68 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	4333      	orrs	r3, r6
 8001000:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001002:	f7ff facb 	bl	800059c <HAL_GetTick>
 8001006:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001008:	682b      	ldr	r3, [r5, #0]
 800100a:	4233      	tst	r3, r6
 800100c:	d1ac      	bne.n	8000f68 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800100e:	f7ff fac5 	bl	800059c <HAL_GetTick>
 8001012:	4643      	mov	r3, r8
 8001014:	1ac0      	subs	r0, r0, r3
 8001016:	2864      	cmp	r0, #100	; 0x64
 8001018:	d9f6      	bls.n	8001008 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 800101a:	2003      	movs	r0, #3
 800101c:	e7db      	b.n	8000fd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 800101e:	f7ff fabd 	bl	800059c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001022:	2302      	movs	r3, #2
 8001024:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 8001028:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800102a:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800102c:	e004      	b.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800102e:	f7ff fab5 	bl	800059c <HAL_GetTick>
 8001032:	1b80      	subs	r0, r0, r6
 8001034:	4548      	cmp	r0, r9
 8001036:	d8f0      	bhi.n	800101a <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001038:	4642      	mov	r2, r8
 800103a:	6a2b      	ldr	r3, [r5, #32]
 800103c:	421a      	tst	r2, r3
 800103e:	d0f6      	beq.n	800102e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001044:	6a13      	ldr	r3, [r2, #32]
 8001046:	6861      	ldr	r1, [r4, #4]
 8001048:	4003      	ands	r3, r0
 800104a:	430b      	orrs	r3, r1
 800104c:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 800104e:	2f01      	cmp	r7, #1
 8001050:	d1ad      	bne.n	8000fae <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001052:	69d3      	ldr	r3, [r2, #28]
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8001056:	400b      	ands	r3, r1
 8001058:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	e7a8      	b.n	8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	40021000 	.word	0x40021000
 8001064:	40007000 	.word	0x40007000
 8001068:	fffffcff 	.word	0xfffffcff
 800106c:	fffeffff 	.word	0xfffeffff
 8001070:	00001388 	.word	0x00001388
 8001074:	efffffff 	.word	0xefffffff

08001078 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001078:	4770      	bx	lr
 800107a:	46c0      	nop			; (mov r8, r8)

0800107c <HAL_TIM_Base_Init>:
{
 800107c:	b510      	push	{r4, lr}
 800107e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001080:	d05b      	beq.n	800113a <HAL_TIM_Base_Init+0xbe>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001082:	233d      	movs	r3, #61	; 0x3d
 8001084:	5cc3      	ldrb	r3, [r0, r3]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d048      	beq.n	800111e <HAL_TIM_Base_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 800108c:	233d      	movs	r3, #61	; 0x3d
 800108e:	2202      	movs	r2, #2
 8001090:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001092:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001094:	492a      	ldr	r1, [pc, #168]	; (8001140 <HAL_TIM_Base_Init+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001096:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001098:	428a      	cmp	r2, r1
 800109a:	d015      	beq.n	80010c8 <HAL_TIM_Base_Init+0x4c>
 800109c:	4929      	ldr	r1, [pc, #164]	; (8001144 <HAL_TIM_Base_Init+0xc8>)
 800109e:	428a      	cmp	r2, r1
 80010a0:	d042      	beq.n	8001128 <HAL_TIM_Base_Init+0xac>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80010a2:	4929      	ldr	r1, [pc, #164]	; (8001148 <HAL_TIM_Base_Init+0xcc>)
 80010a4:	428a      	cmp	r2, r1
 80010a6:	d043      	beq.n	8001130 <HAL_TIM_Base_Init+0xb4>
 80010a8:	4928      	ldr	r1, [pc, #160]	; (800114c <HAL_TIM_Base_Init+0xd0>)
 80010aa:	428a      	cmp	r2, r1
 80010ac:	d010      	beq.n	80010d0 <HAL_TIM_Base_Init+0x54>
 80010ae:	4928      	ldr	r1, [pc, #160]	; (8001150 <HAL_TIM_Base_Init+0xd4>)
 80010b0:	428a      	cmp	r2, r1
 80010b2:	d00d      	beq.n	80010d0 <HAL_TIM_Base_Init+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	438b      	bics	r3, r1
 80010b8:	69a1      	ldr	r1, [r4, #24]
 80010ba:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 80010bc:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010be:	68e3      	ldr	r3, [r4, #12]
 80010c0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80010c2:	6863      	ldr	r3, [r4, #4]
 80010c4:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80010c6:	e012      	b.n	80010ee <HAL_TIM_Base_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80010c8:	2170      	movs	r1, #112	; 0x70
 80010ca:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80010cc:	68a1      	ldr	r1, [r4, #8]
 80010ce:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80010d0:	4920      	ldr	r1, [pc, #128]	; (8001154 <HAL_TIM_Base_Init+0xd8>)
 80010d2:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010d4:	6921      	ldr	r1, [r4, #16]
 80010d6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	438b      	bics	r3, r1
 80010dc:	69a1      	ldr	r1, [r4, #24]
 80010de:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80010e0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010e2:	68e3      	ldr	r3, [r4, #12]
 80010e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80010e6:	6863      	ldr	r3, [r4, #4]
 80010e8:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80010ea:	6963      	ldr	r3, [r4, #20]
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80010ee:	2301      	movs	r3, #1
 80010f0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80010f2:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80010f4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80010f6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80010f8:	3a08      	subs	r2, #8
 80010fa:	54a3      	strb	r3, [r4, r2]
 80010fc:	3201      	adds	r2, #1
 80010fe:	54a3      	strb	r3, [r4, r2]
 8001100:	3201      	adds	r2, #1
 8001102:	54a3      	strb	r3, [r4, r2]
 8001104:	3201      	adds	r2, #1
 8001106:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001108:	3201      	adds	r2, #1
 800110a:	54a3      	strb	r3, [r4, r2]
 800110c:	3201      	adds	r2, #1
 800110e:	54a3      	strb	r3, [r4, r2]
 8001110:	3201      	adds	r2, #1
 8001112:	54a3      	strb	r3, [r4, r2]
 8001114:	3201      	adds	r2, #1
 8001116:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001118:	3a08      	subs	r2, #8
 800111a:	54a3      	strb	r3, [r4, r2]
}
 800111c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800111e:	333c      	adds	r3, #60	; 0x3c
 8001120:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001122:	f7ff ffa9 	bl	8001078 <HAL_TIM_Base_MspInit>
 8001126:	e7b1      	b.n	800108c <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001128:	2170      	movs	r1, #112	; 0x70
 800112a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800112c:	68a1      	ldr	r1, [r4, #8]
 800112e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001130:	4908      	ldr	r1, [pc, #32]	; (8001154 <HAL_TIM_Base_Init+0xd8>)
 8001132:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001134:	6921      	ldr	r1, [r4, #16]
 8001136:	430b      	orrs	r3, r1
 8001138:	e7bc      	b.n	80010b4 <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 800113a:	2001      	movs	r0, #1
 800113c:	e7ee      	b.n	800111c <HAL_TIM_Base_Init+0xa0>
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	40012c00 	.word	0x40012c00
 8001144:	40000400 	.word	0x40000400
 8001148:	40002000 	.word	0x40002000
 800114c:	40014400 	.word	0x40014400
 8001150:	40014800 	.word	0x40014800
 8001154:	fffffcff 	.word	0xfffffcff

08001158 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001158:	223d      	movs	r2, #61	; 0x3d
 800115a:	5c81      	ldrb	r1, [r0, r2]
{
 800115c:	0003      	movs	r3, r0
    return HAL_ERROR;
 800115e:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8001160:	2901      	cmp	r1, #1
 8001162:	d10f      	bne.n	8001184 <HAL_TIM_Base_Start_IT+0x2c>
  htim->State = HAL_TIM_STATE_BUSY;
 8001164:	3101      	adds	r1, #1
 8001166:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	4302      	orrs	r2, r0
 800116e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_TIM_Base_Start_IT+0x48>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_TIM_Base_Start_IT+0x2e>
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_TIM_Base_Start_IT+0x4c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d004      	beq.n	8001186 <HAL_TIM_Base_Start_IT+0x2e>
    __HAL_TIM_ENABLE(htim);
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4302      	orrs	r2, r0
  return HAL_OK;
 8001180:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001186:	2207      	movs	r2, #7
 8001188:	6899      	ldr	r1, [r3, #8]
 800118a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800118c:	2a06      	cmp	r2, #6
 800118e:	d005      	beq.n	800119c <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
 8001190:	2101      	movs	r1, #1
 8001192:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001194:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e7f3      	b.n	8001184 <HAL_TIM_Base_Start_IT+0x2c>
  return HAL_OK;
 800119c:	2000      	movs	r0, #0
 800119e:	e7f1      	b.n	8001184 <HAL_TIM_Base_Start_IT+0x2c>
 80011a0:	40012c00 	.word	0x40012c00
 80011a4:	40000400 	.word	0x40000400

080011a8 <HAL_TIM_OC_DelayElapsedCallback>:
 80011a8:	4770      	bx	lr
 80011aa:	46c0      	nop			; (mov r8, r8)

080011ac <HAL_TIM_IC_CaptureCallback>:
 80011ac:	4770      	bx	lr
 80011ae:	46c0      	nop			; (mov r8, r8)

080011b0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80011b0:	4770      	bx	lr
 80011b2:	46c0      	nop			; (mov r8, r8)

080011b4 <HAL_TIM_TriggerCallback>:
 80011b4:	4770      	bx	lr
 80011b6:	46c0      	nop			; (mov r8, r8)

080011b8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011b8:	2202      	movs	r2, #2
 80011ba:	6803      	ldr	r3, [r0, #0]
{
 80011bc:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011be:	6919      	ldr	r1, [r3, #16]
{
 80011c0:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011c2:	420a      	tst	r2, r1
 80011c4:	d002      	beq.n	80011cc <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80011c6:	68d9      	ldr	r1, [r3, #12]
 80011c8:	420a      	tst	r2, r1
 80011ca:	d165      	bne.n	8001298 <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011cc:	2204      	movs	r2, #4
 80011ce:	6919      	ldr	r1, [r3, #16]
 80011d0:	420a      	tst	r2, r1
 80011d2:	d002      	beq.n	80011da <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80011d4:	68d9      	ldr	r1, [r3, #12]
 80011d6:	420a      	tst	r2, r1
 80011d8:	d14b      	bne.n	8001272 <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011da:	2208      	movs	r2, #8
 80011dc:	6919      	ldr	r1, [r3, #16]
 80011de:	420a      	tst	r2, r1
 80011e0:	d002      	beq.n	80011e8 <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80011e2:	68d9      	ldr	r1, [r3, #12]
 80011e4:	420a      	tst	r2, r1
 80011e6:	d133      	bne.n	8001250 <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011e8:	2210      	movs	r2, #16
 80011ea:	6919      	ldr	r1, [r3, #16]
 80011ec:	420a      	tst	r2, r1
 80011ee:	d002      	beq.n	80011f6 <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80011f0:	68d9      	ldr	r1, [r3, #12]
 80011f2:	420a      	tst	r2, r1
 80011f4:	d11c      	bne.n	8001230 <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011f6:	2201      	movs	r2, #1
 80011f8:	6919      	ldr	r1, [r3, #16]
 80011fa:	420a      	tst	r2, r1
 80011fc:	d002      	beq.n	8001204 <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80011fe:	68d9      	ldr	r1, [r3, #12]
 8001200:	420a      	tst	r2, r1
 8001202:	d15c      	bne.n	80012be <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	6919      	ldr	r1, [r3, #16]
 8001208:	420a      	tst	r2, r1
 800120a:	d002      	beq.n	8001212 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800120c:	68d9      	ldr	r1, [r3, #12]
 800120e:	420a      	tst	r2, r1
 8001210:	d15c      	bne.n	80012cc <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001212:	2240      	movs	r2, #64	; 0x40
 8001214:	6919      	ldr	r1, [r3, #16]
 8001216:	420a      	tst	r2, r1
 8001218:	d002      	beq.n	8001220 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800121a:	68d9      	ldr	r1, [r3, #12]
 800121c:	420a      	tst	r2, r1
 800121e:	d15d      	bne.n	80012dc <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001220:	2220      	movs	r2, #32
 8001222:	6919      	ldr	r1, [r3, #16]
 8001224:	420a      	tst	r2, r1
 8001226:	d002      	beq.n	800122e <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001228:	68d9      	ldr	r1, [r3, #12]
 800122a:	420a      	tst	r2, r1
 800122c:	d141      	bne.n	80012b2 <HAL_TIM_IRQHandler+0xfa>
}
 800122e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001230:	3a21      	subs	r2, #33	; 0x21
 8001232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001234:	3219      	adds	r2, #25
 8001236:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	23c0      	movs	r3, #192	; 0xc0
 800123c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800123e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001240:	421a      	tst	r2, r3
 8001242:	d05e      	beq.n	8001302 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001244:	f7ff ffb2 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001248:	2300      	movs	r3, #0
 800124a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	e7d2      	b.n	80011f6 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001250:	3a11      	subs	r2, #17
 8001252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001254:	320d      	adds	r2, #13
 8001256:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001258:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800125a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800125c:	079b      	lsls	r3, r3, #30
 800125e:	d14d      	bne.n	80012fc <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001260:	f7ff ffa2 	bl	80011a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001264:	0020      	movs	r0, r4
 8001266:	f7ff ffa3 	bl	80011b0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800126a:	2300      	movs	r3, #0
 800126c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	e7ba      	b.n	80011e8 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001272:	3a09      	subs	r2, #9
 8001274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001276:	3207      	adds	r2, #7
 8001278:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	23c0      	movs	r3, #192	; 0xc0
 800127e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001280:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001282:	421a      	tst	r2, r3
 8001284:	d137      	bne.n	80012f6 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001286:	f7ff ff8f 	bl	80011a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800128a:	0020      	movs	r0, r4
 800128c:	f7ff ff90 	bl	80011b0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001290:	2300      	movs	r3, #0
 8001292:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	e7a0      	b.n	80011da <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001298:	3a05      	subs	r2, #5
 800129a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800129c:	3204      	adds	r2, #4
 800129e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	079b      	lsls	r3, r3, #30
 80012a4:	d021      	beq.n	80012ea <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 80012a6:	f7ff ff81 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012aa:	2300      	movs	r3, #0
 80012ac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	e78c      	b.n	80011cc <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80012b2:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 80012b4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80012b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80012b8:	f000 f82a 	bl	8001310 <HAL_TIMEx_CommutCallback>
}
 80012bc:	e7b7      	b.n	800122e <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012be:	3a03      	subs	r2, #3
 80012c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012c2:	0020      	movs	r0, r4
 80012c4:	f7ff f868 	bl	8000398 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	e79b      	b.n	8001204 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012cc:	3a02      	subs	r2, #2
 80012ce:	3aff      	subs	r2, #255	; 0xff
 80012d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80012d2:	0020      	movs	r0, r4
 80012d4:	f000 f81e 	bl	8001314 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	e79a      	b.n	8001212 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012dc:	3a81      	subs	r2, #129	; 0x81
 80012de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80012e0:	0020      	movs	r0, r4
 80012e2:	f7ff ff67 	bl	80011b4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	e79a      	b.n	8001220 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ea:	f7ff ff5d 	bl	80011a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012ee:	0020      	movs	r0, r4
 80012f0:	f7ff ff5e 	bl	80011b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80012f4:	e7d9      	b.n	80012aa <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80012f6:	f7ff ff59 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
 80012fa:	e7c9      	b.n	8001290 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 80012fc:	f7ff ff56 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
 8001300:	e7b3      	b.n	800126a <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001302:	f7ff ff51 	bl	80011a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001306:	0020      	movs	r0, r4
 8001308:	f7ff ff52 	bl	80011b0 <HAL_TIM_PWM_PulseFinishedCallback>
 800130c:	e79c      	b.n	8001248 <HAL_TIM_IRQHandler+0x90>
 800130e:	46c0      	nop			; (mov r8, r8)

08001310 <HAL_TIMEx_CommutCallback>:
 8001310:	4770      	bx	lr
 8001312:	46c0      	nop			; (mov r8, r8)

08001314 <HAL_TIMEx_BreakCallback>:
 8001314:	4770      	bx	lr
 8001316:	46c0      	nop			; (mov r8, r8)

08001318 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001318:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800131a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800131c:	07da      	lsls	r2, r3, #31
 800131e:	d506      	bpl.n	800132e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001320:	6801      	ldr	r1, [r0, #0]
 8001322:	4c28      	ldr	r4, [pc, #160]	; (80013c4 <UART_AdvFeatureConfig+0xac>)
 8001324:	684a      	ldr	r2, [r1, #4]
 8001326:	4022      	ands	r2, r4
 8001328:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800132a:	4322      	orrs	r2, r4
 800132c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800132e:	079a      	lsls	r2, r3, #30
 8001330:	d506      	bpl.n	8001340 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001332:	6801      	ldr	r1, [r0, #0]
 8001334:	4c24      	ldr	r4, [pc, #144]	; (80013c8 <UART_AdvFeatureConfig+0xb0>)
 8001336:	684a      	ldr	r2, [r1, #4]
 8001338:	4022      	ands	r2, r4
 800133a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800133c:	4322      	orrs	r2, r4
 800133e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001340:	075a      	lsls	r2, r3, #29
 8001342:	d506      	bpl.n	8001352 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001344:	6801      	ldr	r1, [r0, #0]
 8001346:	4c21      	ldr	r4, [pc, #132]	; (80013cc <UART_AdvFeatureConfig+0xb4>)
 8001348:	684a      	ldr	r2, [r1, #4]
 800134a:	4022      	ands	r2, r4
 800134c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800134e:	4322      	orrs	r2, r4
 8001350:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001352:	071a      	lsls	r2, r3, #28
 8001354:	d506      	bpl.n	8001364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001356:	6801      	ldr	r1, [r0, #0]
 8001358:	4c1d      	ldr	r4, [pc, #116]	; (80013d0 <UART_AdvFeatureConfig+0xb8>)
 800135a:	684a      	ldr	r2, [r1, #4]
 800135c:	4022      	ands	r2, r4
 800135e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001360:	4322      	orrs	r2, r4
 8001362:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001364:	06da      	lsls	r2, r3, #27
 8001366:	d506      	bpl.n	8001376 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001368:	6801      	ldr	r1, [r0, #0]
 800136a:	4c1a      	ldr	r4, [pc, #104]	; (80013d4 <UART_AdvFeatureConfig+0xbc>)
 800136c:	688a      	ldr	r2, [r1, #8]
 800136e:	4022      	ands	r2, r4
 8001370:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001372:	4322      	orrs	r2, r4
 8001374:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001376:	069a      	lsls	r2, r3, #26
 8001378:	d506      	bpl.n	8001388 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800137a:	6801      	ldr	r1, [r0, #0]
 800137c:	4c16      	ldr	r4, [pc, #88]	; (80013d8 <UART_AdvFeatureConfig+0xc0>)
 800137e:	688a      	ldr	r2, [r1, #8]
 8001380:	4022      	ands	r2, r4
 8001382:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001384:	4322      	orrs	r2, r4
 8001386:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001388:	065a      	lsls	r2, r3, #25
 800138a:	d50a      	bpl.n	80013a2 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800138c:	6801      	ldr	r1, [r0, #0]
 800138e:	4d13      	ldr	r5, [pc, #76]	; (80013dc <UART_AdvFeatureConfig+0xc4>)
 8001390:	684a      	ldr	r2, [r1, #4]
 8001392:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001394:	402a      	ands	r2, r5
 8001396:	4322      	orrs	r2, r4
 8001398:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	0352      	lsls	r2, r2, #13
 800139e:	4294      	cmp	r4, r2
 80013a0:	d009      	beq.n	80013b6 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80013a2:	061b      	lsls	r3, r3, #24
 80013a4:	d506      	bpl.n	80013b4 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80013a6:	6802      	ldr	r2, [r0, #0]
 80013a8:	490d      	ldr	r1, [pc, #52]	; (80013e0 <UART_AdvFeatureConfig+0xc8>)
 80013aa:	6853      	ldr	r3, [r2, #4]
 80013ac:	400b      	ands	r3, r1
 80013ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80013b0:	430b      	orrs	r3, r1
 80013b2:	6053      	str	r3, [r2, #4]
  }
}
 80013b4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80013b6:	684a      	ldr	r2, [r1, #4]
 80013b8:	4c0a      	ldr	r4, [pc, #40]	; (80013e4 <UART_AdvFeatureConfig+0xcc>)
 80013ba:	4022      	ands	r2, r4
 80013bc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80013be:	4322      	orrs	r2, r4
 80013c0:	604a      	str	r2, [r1, #4]
 80013c2:	e7ee      	b.n	80013a2 <UART_AdvFeatureConfig+0x8a>
 80013c4:	fffdffff 	.word	0xfffdffff
 80013c8:	fffeffff 	.word	0xfffeffff
 80013cc:	fffbffff 	.word	0xfffbffff
 80013d0:	ffff7fff 	.word	0xffff7fff
 80013d4:	ffffefff 	.word	0xffffefff
 80013d8:	ffffdfff 	.word	0xffffdfff
 80013dc:	ffefffff 	.word	0xffefffff
 80013e0:	fff7ffff 	.word	0xfff7ffff
 80013e4:	ff9fffff 	.word	0xff9fffff

080013e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ea:	2384      	movs	r3, #132	; 0x84
 80013ec:	2200      	movs	r2, #0
{
 80013ee:	46c6      	mov	lr, r8
 80013f0:	0004      	movs	r4, r0
 80013f2:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013f4:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80013f6:	f7ff f8d1 	bl	800059c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80013fa:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80013fc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	0712      	lsls	r2, r2, #28
 8001402:	d410      	bmi.n	8001426 <UART_CheckIdleState+0x3e>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	0752      	lsls	r2, r2, #29
 8001408:	d43c      	bmi.n	8001484 <UART_CheckIdleState+0x9c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800140a:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 800140c:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800140e:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001410:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001412:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8001414:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001416:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001418:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 800141a:	2378      	movs	r3, #120	; 0x78
 800141c:	2200      	movs	r2, #0
 800141e:	54e2      	strb	r2, [r4, r3]
}
 8001420:	bc80      	pop	{r7}
 8001422:	46b8      	mov	r8, r7
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001426:	69da      	ldr	r2, [r3, #28]
 8001428:	0292      	lsls	r2, r2, #10
 800142a:	d4eb      	bmi.n	8001404 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800142c:	2680      	movs	r6, #128	; 0x80
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800142e:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001430:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001432:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001434:	04b6      	lsls	r6, r6, #18
 8001436:	e010      	b.n	800145a <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4217      	tst	r7, r2
 800143e:	d009      	beq.n	8001454 <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001440:	4641      	mov	r1, r8
 8001442:	69da      	ldr	r2, [r3, #28]
 8001444:	4211      	tst	r1, r2
 8001446:	d158      	bne.n	80014fa <UART_CheckIdleState+0x112>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	69d9      	ldr	r1, [r3, #28]
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	4211      	tst	r1, r2
 8001450:	d000      	beq.n	8001454 <UART_CheckIdleState+0x6c>
 8001452:	e083      	b.n	800155c <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001454:	69da      	ldr	r2, [r3, #28]
 8001456:	0292      	lsls	r2, r2, #10
 8001458:	d4d4      	bmi.n	8001404 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800145a:	f7ff f89f 	bl	800059c <HAL_GetTick>
 800145e:	1b40      	subs	r0, r0, r5
 8001460:	42b0      	cmp	r0, r6
 8001462:	d3e9      	bcc.n	8001438 <UART_CheckIdleState+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001464:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001468:	2301      	movs	r3, #1
 800146a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800146e:	2080      	movs	r0, #128	; 0x80
 8001470:	6822      	ldr	r2, [r4, #0]
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	4383      	bics	r3, r0
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800147c:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800147e:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 8001480:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8001482:	e7ca      	b.n	800141a <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	d4bf      	bmi.n	800140a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800148a:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800148c:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800148e:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001490:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001492:	04b6      	lsls	r6, r6, #18
 8001494:	e011      	b.n	80014ba <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4217      	tst	r7, r2
 800149c:	d00a      	beq.n	80014b4 <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800149e:	4641      	mov	r1, r8
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	4211      	tst	r1, r2
 80014a4:	d000      	beq.n	80014a8 <UART_CheckIdleState+0xc0>
 80014a6:	e089      	b.n	80015bc <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	69d9      	ldr	r1, [r3, #28]
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	4211      	tst	r1, r2
 80014b0:	d000      	beq.n	80014b4 <UART_CheckIdleState+0xcc>
 80014b2:	e0b4      	b.n	800161e <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	025b      	lsls	r3, r3, #9
 80014b8:	d4a7      	bmi.n	800140a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ba:	f7ff f86f 	bl	800059c <HAL_GetTick>
 80014be:	1b40      	subs	r0, r0, r5
 80014c0:	42b0      	cmp	r0, r6
 80014c2:	d3e8      	bcc.n	8001496 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014c4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014c8:	2201      	movs	r2, #1
 80014ca:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80014ce:	6821      	ldr	r1, [r4, #0]
 80014d0:	4d6b      	ldr	r5, [pc, #428]	; (8001680 <UART_CheckIdleState+0x298>)
 80014d2:	680b      	ldr	r3, [r1, #0]
 80014d4:	402b      	ands	r3, r5
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014dc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014e0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014e4:	6821      	ldr	r1, [r4, #0]
 80014e6:	688b      	ldr	r3, [r1, #8]
 80014e8:	4393      	bics	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
 80014ec:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 80014f4:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 80014f6:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80014f8:	e78f      	b.n	800141a <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80014fa:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014fc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001500:	2201      	movs	r2, #1
 8001502:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001506:	6821      	ldr	r1, [r4, #0]
 8001508:	4d5d      	ldr	r5, [pc, #372]	; (8001680 <UART_CheckIdleState+0x298>)
 800150a:	680b      	ldr	r3, [r1, #0]
 800150c:	402b      	ands	r3, r5
 800150e:	600b      	str	r3, [r1, #0]
 8001510:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001514:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001518:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800151c:	6821      	ldr	r1, [r4, #0]
 800151e:	688b      	ldr	r3, [r1, #8]
 8001520:	4393      	bics	r3, r2
 8001522:	608b      	str	r3, [r1, #8]
 8001524:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001528:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800152a:	2b01      	cmp	r3, #1
 800152c:	d10a      	bne.n	8001544 <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800152e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001532:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001536:	2010      	movs	r0, #16
 8001538:	6822      	ldr	r2, [r4, #0]
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	4383      	bics	r3, r0
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001548:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800154a:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800154c:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800154e:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001550:	6623      	str	r3, [r4, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001552:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001554:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8001556:	3a0c      	subs	r2, #12
 8001558:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 800155a:	e783      	b.n	8001464 <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800155c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800155e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001562:	2201      	movs	r2, #1
 8001564:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001568:	6821      	ldr	r1, [r4, #0]
 800156a:	4d45      	ldr	r5, [pc, #276]	; (8001680 <UART_CheckIdleState+0x298>)
 800156c:	680b      	ldr	r3, [r1, #0]
 800156e:	402b      	ands	r3, r5
 8001570:	600b      	str	r3, [r1, #0]
 8001572:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001576:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800157a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800157e:	6821      	ldr	r1, [r4, #0]
 8001580:	688b      	ldr	r3, [r1, #8]
 8001582:	4393      	bics	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
 8001586:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800158a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800158c:	2b01      	cmp	r3, #1
 800158e:	d10a      	bne.n	80015a6 <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001590:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001594:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001598:	2010      	movs	r0, #16
 800159a:	6822      	ldr	r2, [r4, #0]
 800159c:	6813      	ldr	r3, [r2, #0]
 800159e:	4383      	bics	r3, r0
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80015a6:	2220      	movs	r2, #32
 80015a8:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80015aa:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80015ac:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015ae:	2300      	movs	r3, #0
 80015b0:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80015b2:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80015b4:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80015b6:	3258      	adds	r2, #88	; 0x58
 80015b8:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80015ba:	e753      	b.n	8001464 <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80015bc:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015be:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015c2:	2201      	movs	r2, #1
 80015c4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015c8:	6821      	ldr	r1, [r4, #0]
 80015ca:	4d2d      	ldr	r5, [pc, #180]	; (8001680 <UART_CheckIdleState+0x298>)
 80015cc:	680b      	ldr	r3, [r1, #0]
 80015ce:	402b      	ands	r3, r5
 80015d0:	600b      	str	r3, [r1, #0]
 80015d2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015d6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015da:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015de:	6821      	ldr	r1, [r4, #0]
 80015e0:	688b      	ldr	r3, [r1, #8]
 80015e2:	4393      	bics	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
 80015e6:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80015ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d10a      	bne.n	8001606 <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015f0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015f4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80015f8:	2010      	movs	r0, #16
 80015fa:	6822      	ldr	r2, [r4, #0]
 80015fc:	6813      	ldr	r3, [r2, #0]
 80015fe:	4383      	bics	r3, r0
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800160a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800160c:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800160e:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001610:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001612:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8001614:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001616:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8001618:	3a0c      	subs	r2, #12
 800161a:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 800161c:	e752      	b.n	80014c4 <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800161e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001620:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001624:	2201      	movs	r2, #1
 8001626:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800162a:	6821      	ldr	r1, [r4, #0]
 800162c:	4d14      	ldr	r5, [pc, #80]	; (8001680 <UART_CheckIdleState+0x298>)
 800162e:	680b      	ldr	r3, [r1, #0]
 8001630:	402b      	ands	r3, r5
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001638:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800163c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001640:	6821      	ldr	r1, [r4, #0]
 8001642:	688b      	ldr	r3, [r1, #8]
 8001644:	4393      	bics	r3, r2
 8001646:	608b      	str	r3, [r1, #8]
 8001648:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800164c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800164e:	2b01      	cmp	r3, #1
 8001650:	d10a      	bne.n	8001668 <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001652:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001656:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800165a:	2010      	movs	r0, #16
 800165c:	6822      	ldr	r2, [r4, #0]
 800165e:	6813      	ldr	r3, [r2, #0]
 8001660:	4383      	bics	r3, r0
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8001668:	2220      	movs	r2, #32
 800166a:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800166c:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800166e:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001670:	2300      	movs	r3, #0
 8001672:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8001674:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001676:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8001678:	3258      	adds	r2, #88	; 0x58
 800167a:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 800167c:	e722      	b.n	80014c4 <UART_CheckIdleState+0xdc>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	fffffedf 	.word	0xfffffedf

08001684 <HAL_UART_Init>:
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001688:	d100      	bne.n	800168c <HAL_UART_Init+0x8>
 800168a:	e076      	b.n	800177a <HAL_UART_Init+0xf6>
  if (huart->gState == HAL_UART_STATE_RESET)
 800168c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d067      	beq.n	8001762 <HAL_UART_Init+0xde>
  huart->gState = HAL_UART_STATE_BUSY;
 8001692:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001694:	2101      	movs	r1, #1
 8001696:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001698:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800169a:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800169c:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800169e:	438b      	bics	r3, r1
 80016a0:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016a2:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016a4:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016a6:	432b      	orrs	r3, r5
 80016a8:	6965      	ldr	r5, [r4, #20]
 80016aa:	69e1      	ldr	r1, [r4, #28]
 80016ac:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016ae:	4d49      	ldr	r5, [pc, #292]	; (80017d4 <HAL_UART_Init+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016b0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016b2:	4028      	ands	r0, r5
 80016b4:	4303      	orrs	r3, r0
 80016b6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016b8:	6853      	ldr	r3, [r2, #4]
 80016ba:	4847      	ldr	r0, [pc, #284]	; (80017d8 <HAL_UART_Init+0x154>)
  tmpreg |= huart->Init.OneBitSampling;
 80016bc:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016be:	4003      	ands	r3, r0
 80016c0:	68e0      	ldr	r0, [r4, #12]
 80016c2:	4303      	orrs	r3, r0
 80016c4:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80016c6:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016c8:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80016ca:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016cc:	4d43      	ldr	r5, [pc, #268]	; (80017dc <HAL_UART_Init+0x158>)
 80016ce:	4028      	ands	r0, r5
 80016d0:	4303      	orrs	r3, r0
 80016d2:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016d4:	4b42      	ldr	r3, [pc, #264]	; (80017e0 <HAL_UART_Init+0x15c>)
 80016d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d8:	2303      	movs	r3, #3
 80016da:	4013      	ands	r3, r2
 80016dc:	3b01      	subs	r3, #1
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d91f      	bls.n	8001722 <HAL_UART_Init+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	4299      	cmp	r1, r3
 80016e8:	d100      	bne.n	80016ec <HAL_UART_Init+0x68>
 80016ea:	e070      	b.n	80017ce <HAL_UART_Init+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80016ec:	f7ff fbfa 	bl	8000ee4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d124      	bne.n	800173e <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80016f8:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d135      	bne.n	800176c <HAL_UART_Init+0xe8>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	4938      	ldr	r1, [pc, #224]	; (80017e4 <HAL_UART_Init+0x160>)
 8001704:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001706:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001708:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800170a:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800170c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	438a      	bics	r2, r1
 8001712:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	3907      	subs	r1, #7
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800171c:	f7ff fe64 	bl	80013e8 <UART_CheckIdleState>
 8001720:	e01b      	b.n	800175a <HAL_UART_Init+0xd6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001722:	2080      	movs	r0, #128	; 0x80
 8001724:	4a30      	ldr	r2, [pc, #192]	; (80017e8 <HAL_UART_Init+0x164>)
 8001726:	0200      	lsls	r0, r0, #8
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	4281      	cmp	r1, r0
 800172c:	d027      	beq.n	800177e <HAL_UART_Init+0xfa>
    switch (clocksource)
 800172e:	2b04      	cmp	r3, #4
 8001730:	d044      	beq.n	80017bc <HAL_UART_Init+0x138>
 8001732:	d813      	bhi.n	800175c <HAL_UART_Init+0xd8>
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0d9      	beq.n	80016ec <HAL_UART_Init+0x68>
 8001738:	2b02      	cmp	r3, #2
 800173a:	d10a      	bne.n	8001752 <HAL_UART_Init+0xce>
        pclk = (uint32_t) HSI_VALUE;
 800173c:	482b      	ldr	r0, [pc, #172]	; (80017ec <HAL_UART_Init+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800173e:	6861      	ldr	r1, [r4, #4]
 8001740:	084b      	lsrs	r3, r1, #1
 8001742:	1818      	adds	r0, r3, r0
 8001744:	f7fe fce0 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001748:	0002      	movs	r2, r0
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_UART_Init+0x16c>)
 800174c:	3a10      	subs	r2, #16
 800174e:	429a      	cmp	r2, r3
 8001750:	d910      	bls.n	8001774 <HAL_UART_Init+0xf0>
  huart->RxISR = NULL;
 8001752:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001754:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8001756:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8001758:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800175a:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 800175c:	2b08      	cmp	r3, #8
 800175e:	d0ee      	beq.n	800173e <HAL_UART_Init+0xba>
 8001760:	e7f7      	b.n	8001752 <HAL_UART_Init+0xce>
    huart->Lock = HAL_UNLOCKED;
 8001762:	2278      	movs	r2, #120	; 0x78
 8001764:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8001766:	f7fe fe41 	bl	80003ec <HAL_UART_MspInit>
 800176a:	e792      	b.n	8001692 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 800176c:	0020      	movs	r0, r4
 800176e:	f7ff fdd3 	bl	8001318 <UART_AdvFeatureConfig>
 8001772:	e7c5      	b.n	8001700 <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	60d8      	str	r0, [r3, #12]
  return ret;
 8001778:	e7bc      	b.n	80016f4 <HAL_UART_Init+0x70>
    return HAL_ERROR;
 800177a:	2001      	movs	r0, #1
 800177c:	e7ed      	b.n	800175a <HAL_UART_Init+0xd6>
    switch (clocksource)
 800177e:	2b04      	cmp	r3, #4
 8001780:	d01f      	beq.n	80017c2 <HAL_UART_Init+0x13e>
 8001782:	d816      	bhi.n	80017b2 <HAL_UART_Init+0x12e>
 8001784:	2b00      	cmp	r3, #0
 8001786:	d022      	beq.n	80017ce <HAL_UART_Init+0x14a>
 8001788:	2b02      	cmp	r3, #2
 800178a:	d1e2      	bne.n	8001752 <HAL_UART_Init+0xce>
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_UART_Init+0x170>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800178e:	6861      	ldr	r1, [r4, #4]
 8001790:	0848      	lsrs	r0, r1, #1
 8001792:	18c0      	adds	r0, r0, r3
 8001794:	f7fe fcb8 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001798:	0002      	movs	r2, r0
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_UART_Init+0x16c>)
 800179c:	3a10      	subs	r2, #16
 800179e:	429a      	cmp	r2, r3
 80017a0:	d8d7      	bhi.n	8001752 <HAL_UART_Init+0xce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_UART_Init+0x174>)
        huart->Instance->BRR = brrtemp;
 80017a4:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80017a6:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017a8:	0700      	lsls	r0, r0, #28
 80017aa:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80017ac:	4303      	orrs	r3, r0
 80017ae:	60d3      	str	r3, [r2, #12]
  return ret;
 80017b0:	e7a0      	b.n	80016f4 <HAL_UART_Init+0x70>
    switch (clocksource)
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d1cd      	bne.n	8001752 <HAL_UART_Init+0xce>
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	e7e8      	b.n	800178e <HAL_UART_Init+0x10a>
        pclk = HAL_RCC_GetSysClockFreq();
 80017bc:	f7ff fb62 	bl	8000e84 <HAL_RCC_GetSysClockFreq>
        break;
 80017c0:	e796      	b.n	80016f0 <HAL_UART_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 80017c2:	f7ff fb5f 	bl	8000e84 <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017c6:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d1e0      	bne.n	800178e <HAL_UART_Init+0x10a>
 80017cc:	e792      	b.n	80016f4 <HAL_UART_Init+0x70>
        pclk = HAL_RCC_GetPCLK1Freq();
 80017ce:	f7ff fb89 	bl	8000ee4 <HAL_RCC_GetPCLK1Freq>
        break;
 80017d2:	e7f8      	b.n	80017c6 <HAL_UART_Init+0x142>
 80017d4:	ffff69f3 	.word	0xffff69f3
 80017d8:	ffffcfff 	.word	0xffffcfff
 80017dc:	fffff4ff 	.word	0xfffff4ff
 80017e0:	40021000 	.word	0x40021000
 80017e4:	fffff7ff 	.word	0xfffff7ff
 80017e8:	080028c0 	.word	0x080028c0
 80017ec:	007a1200 	.word	0x007a1200
 80017f0:	0000ffef 	.word	0x0000ffef
 80017f4:	00f42400 	.word	0x00f42400
 80017f8:	0000fff0 	.word	0x0000fff0

080017fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80017fc:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 80017fe:	f000 fac3 	bl	8001d88 <vTaskStartScheduler>
  
  return osOK;
}
 8001802:	2000      	movs	r0, #0
 8001804:	bd10      	pop	{r4, pc}
 8001806:	46c0      	nop			; (mov r8, r8)

08001808 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800180a:	6945      	ldr	r5, [r0, #20]
{
 800180c:	0004      	movs	r4, r0
 800180e:	000b      	movs	r3, r1
 8001810:	b087      	sub	sp, #28
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001812:	2d00      	cmp	r5, #0
 8001814:	d011      	beq.n	800183a <osThreadCreate+0x32>
 8001816:	6986      	ldr	r6, [r0, #24]
 8001818:	2e00      	cmp	r6, #0
 800181a:	d00e      	beq.n	800183a <osThreadCreate+0x32>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800181c:	6821      	ldr	r1, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800181e:	6922      	ldr	r2, [r4, #16]
 8001820:	2708      	movs	r7, #8
 8001822:	5fe4      	ldrsh	r4, [r4, r7]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001824:	6840      	ldr	r0, [r0, #4]
  if (priority != osPriorityError) {
 8001826:	2c84      	cmp	r4, #132	; 0x84
 8001828:	d022      	beq.n	8001870 <osThreadCreate+0x68>
    fpriority += (priority - osPriorityIdle);
 800182a:	3403      	adds	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800182c:	9602      	str	r6, [sp, #8]
 800182e:	9501      	str	r5, [sp, #4]
 8001830:	9400      	str	r4, [sp, #0]
 8001832:	f000 f939 	bl	8001aa8 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8001836:	b007      	add	sp, #28
 8001838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800183a:	6860      	ldr	r0, [r4, #4]
 800183c:	6821      	ldr	r1, [r4, #0]
 800183e:	8a22      	ldrh	r2, [r4, #16]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001840:	2508      	movs	r5, #8
 8001842:	5f64      	ldrsh	r4, [r4, r5]
  if (priority != osPriorityError) {
 8001844:	2c84      	cmp	r4, #132	; 0x84
 8001846:	d009      	beq.n	800185c <osThreadCreate+0x54>
    fpriority += (priority - osPriorityIdle);
 8001848:	3403      	adds	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800184a:	ad05      	add	r5, sp, #20
 800184c:	9501      	str	r5, [sp, #4]
 800184e:	9400      	str	r4, [sp, #0]
 8001850:	f000 f9e0 	bl	8001c14 <xTaskCreate>
 8001854:	2801      	cmp	r0, #1
 8001856:	d109      	bne.n	800186c <osThreadCreate+0x64>
  return handle;
 8001858:	9805      	ldr	r0, [sp, #20]
 800185a:	e7ec      	b.n	8001836 <osThreadCreate+0x2e>
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800185c:	2400      	movs	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800185e:	ad05      	add	r5, sp, #20
 8001860:	9501      	str	r5, [sp, #4]
 8001862:	9400      	str	r4, [sp, #0]
 8001864:	f000 f9d6 	bl	8001c14 <xTaskCreate>
 8001868:	2801      	cmp	r0, #1
 800186a:	d0f5      	beq.n	8001858 <osThreadCreate+0x50>
      return NULL;
 800186c:	2000      	movs	r0, #0
 800186e:	e7e2      	b.n	8001836 <osThreadCreate+0x2e>
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001870:	2400      	movs	r4, #0
 8001872:	e7db      	b.n	800182c <osThreadCreate+0x24>

08001874 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001874:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001876:	2800      	cmp	r0, #0
 8001878:	d100      	bne.n	800187c <osDelay+0x8>
 800187a:	3001      	adds	r0, #1
 800187c:	f000 fc66 	bl	800214c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001880:	2000      	movs	r0, #0
 8001882:	bd10      	pop	{r4, pc}

08001884 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001884:	0003      	movs	r3, r0
 8001886:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001888:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188a:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001890:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001892:	4252      	negs	r2, r2
 8001894:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001896:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001898:	4770      	bx	lr
 800189a:	46c0      	nop			; (mov r8, r8)

0800189c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800189c:	2300      	movs	r3, #0
 800189e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018a0:	4770      	bx	lr
 80018a2:	46c0      	nop			; (mov r8, r8)

080018a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80018a4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018a6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80018a8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018aa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018b0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80018b2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018b4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80018b6:	3301      	adds	r3, #1
 80018b8:	6003      	str	r3, [r0, #0]
}
 80018ba:	4770      	bx	lr

080018bc <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018bc:	0003      	movs	r3, r0
{
 80018be:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018c0:	680d      	ldr	r5, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018c2:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 80018c4:	1c6a      	adds	r2, r5, #1
 80018c6:	d00d      	beq.n	80018e4 <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018c8:	001c      	movs	r4, r3
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	42aa      	cmp	r2, r5
 80018d0:	d9fa      	bls.n	80018c8 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80018d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80018d4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80018d6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 80018d8:	608c      	str	r4, [r1, #8]
	( pxList->uxNumberOfItems )++;
 80018da:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 80018dc:	6061      	str	r1, [r4, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018de:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80018e0:	6003      	str	r3, [r0, #0]
}
 80018e2:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 80018e4:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80018e6:	6863      	ldr	r3, [r4, #4]
 80018e8:	e7f3      	b.n	80018d2 <vListInsert+0x16>
 80018ea:	46c0      	nop			; (mov r8, r8)

080018ec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80018ec:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018ee:	6841      	ldr	r1, [r0, #4]
 80018f0:	6882      	ldr	r2, [r0, #8]
 80018f2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018f4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	4281      	cmp	r1, r0
 80018fa:	d006      	beq.n	800190a <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80018fc:	2200      	movs	r2, #0
 80018fe:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	3a01      	subs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001906:	6818      	ldr	r0, [r3, #0]
}
 8001908:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	e7f6      	b.n	80018fc <uxListRemove+0x10>
 800190e:	46c0      	nop			; (mov r8, r8)

08001910 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001912:	46c6      	mov	lr, r8
 8001914:	b500      	push	{lr}
 8001916:	0004      	movs	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001918:	f000 fd5e 	bl	80023d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800191c:	4a31      	ldr	r2, [pc, #196]	; (80019e4 <prvAddNewTaskToReadyList+0xd4>)
		if( pxCurrentTCB == NULL )
 800191e:	4e32      	ldr	r6, [pc, #200]	; (80019e8 <prvAddNewTaskToReadyList+0xd8>)
		uxCurrentNumberOfTasks++;
 8001920:	6813      	ldr	r3, [r2, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001926:	6833      	ldr	r3, [r6, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d02a      	beq.n	8001982 <prvAddNewTaskToReadyList+0x72>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800192c:	4f2f      	ldr	r7, [pc, #188]	; (80019ec <prvAddNewTaskToReadyList+0xdc>)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01e      	beq.n	8001972 <prvAddNewTaskToReadyList+0x62>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001934:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001936:	4d2e      	ldr	r5, [pc, #184]	; (80019f0 <prvAddNewTaskToReadyList+0xe0>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001938:	492e      	ldr	r1, [pc, #184]	; (80019f4 <prvAddNewTaskToReadyList+0xe4>)
 800193a:	680b      	ldr	r3, [r1, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	600b      	str	r3, [r1, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <prvAddNewTaskToReadyList+0xe8>)
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	4291      	cmp	r1, r2
 8001946:	d200      	bcs.n	800194a <prvAddNewTaskToReadyList+0x3a>
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	0093      	lsls	r3, r2, #2
 800194c:	189b      	adds	r3, r3, r2
 800194e:	0098      	lsls	r0, r3, #2
 8001950:	1d21      	adds	r1, r4, #4
 8001952:	1828      	adds	r0, r5, r0
 8001954:	f7ff ffa6 	bl	80018a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001958:	f000 fd4a 	bl	80023f0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <prvAddNewTaskToReadyList+0x5c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001962:	6833      	ldr	r3, [r6, #0]
 8001964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001966:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001968:	429a      	cmp	r2, r3
 800196a:	d312      	bcc.n	8001992 <prvAddNewTaskToReadyList+0x82>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800196c:	bc80      	pop	{r7}
 800196e:	46b8      	mov	r8, r7
 8001970:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001972:	6833      	ldr	r3, [r6, #0]
 8001974:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	4293      	cmp	r3, r2
 800197a:	d800      	bhi.n	800197e <prvAddNewTaskToReadyList+0x6e>
					pxCurrentTCB = pxNewTCB;
 800197c:	6034      	str	r4, [r6, #0]
 800197e:	4d1c      	ldr	r5, [pc, #112]	; (80019f0 <prvAddNewTaskToReadyList+0xe0>)
 8001980:	e7da      	b.n	8001938 <prvAddNewTaskToReadyList+0x28>
			pxCurrentTCB = pxNewTCB;
 8001982:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001984:	6813      	ldr	r3, [r2, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d006      	beq.n	8001998 <prvAddNewTaskToReadyList+0x88>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800198a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800198c:	4d18      	ldr	r5, [pc, #96]	; (80019f0 <prvAddNewTaskToReadyList+0xe0>)
 800198e:	4f17      	ldr	r7, [pc, #92]	; (80019ec <prvAddNewTaskToReadyList+0xdc>)
 8001990:	e7d2      	b.n	8001938 <prvAddNewTaskToReadyList+0x28>
			taskYIELD_IF_USING_PREEMPTION();
 8001992:	f000 fd15 	bl	80023c0 <vPortYield>
}
 8001996:	e7e9      	b.n	800196c <prvAddNewTaskToReadyList+0x5c>
 8001998:	238c      	movs	r3, #140	; 0x8c
 800199a:	4d15      	ldr	r5, [pc, #84]	; (80019f0 <prvAddNewTaskToReadyList+0xe0>)
 800199c:	4698      	mov	r8, r3
 800199e:	002f      	movs	r7, r5
 80019a0:	44a8      	add	r8, r5
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019a2:	0038      	movs	r0, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019a4:	3714      	adds	r7, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019a6:	f7ff ff6d 	bl	8001884 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019aa:	45b8      	cmp	r8, r7
 80019ac:	d1f9      	bne.n	80019a2 <prvAddNewTaskToReadyList+0x92>
	}

	vListInitialise( &xDelayedTaskList1 );
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <prvAddNewTaskToReadyList+0xec>)
 80019b0:	4698      	mov	r8, r3
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7ff ff66 	bl	8001884 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019b8:	4f11      	ldr	r7, [pc, #68]	; (8001a00 <prvAddNewTaskToReadyList+0xf0>)
 80019ba:	0038      	movs	r0, r7
 80019bc:	f7ff ff62 	bl	8001884 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019c0:	4810      	ldr	r0, [pc, #64]	; (8001a04 <prvAddNewTaskToReadyList+0xf4>)
 80019c2:	f7ff ff5f 	bl	8001884 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80019c6:	4810      	ldr	r0, [pc, #64]	; (8001a08 <prvAddNewTaskToReadyList+0xf8>)
 80019c8:	f7ff ff5c 	bl	8001884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80019cc:	480f      	ldr	r0, [pc, #60]	; (8001a0c <prvAddNewTaskToReadyList+0xfc>)
 80019ce:	f7ff ff59 	bl	8001884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80019d2:	4642      	mov	r2, r8
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <prvAddNewTaskToReadyList+0x100>)
 80019d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <prvAddNewTaskToReadyList+0x104>)
		prvAddTaskToReadyList( pxNewTCB );
 80019da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019dc:	601f      	str	r7, [r3, #0]
 80019de:	4f03      	ldr	r7, [pc, #12]	; (80019ec <prvAddNewTaskToReadyList+0xdc>)
}
 80019e0:	e7aa      	b.n	8001938 <prvAddNewTaskToReadyList+0x28>
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	2000040c 	.word	0x2000040c
 80019e8:	20000374 	.word	0x20000374
 80019ec:	20000468 	.word	0x20000468
 80019f0:	20000380 	.word	0x20000380
 80019f4:	2000041c 	.word	0x2000041c
 80019f8:	20000420 	.word	0x20000420
 80019fc:	20000424 	.word	0x20000424
 8001a00:	20000438 	.word	0x20000438
 8001a04:	20000454 	.word	0x20000454
 8001a08:	20000480 	.word	0x20000480
 8001a0c:	2000046c 	.word	0x2000046c
 8001a10:	20000378 	.word	0x20000378
 8001a14:	2000037c 	.word	0x2000037c

08001a18 <prvIdleTask>:
{
 8001a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1a:	4647      	mov	r7, r8
 8001a1c:	46ce      	mov	lr, r9
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <prvIdleTask+0x80>)
 8001a20:	b580      	push	{r7, lr}
 8001a22:	4698      	mov	r8, r3
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <prvIdleTask+0x84>)
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001a26:	279d      	movs	r7, #157	; 0x9d
 8001a28:	4699      	mov	r9, r3
 8001a2a:	4d1d      	ldr	r5, [pc, #116]	; (8001aa0 <prvIdleTask+0x88>)
 8001a2c:	4e1d      	ldr	r6, [pc, #116]	; (8001aa4 <prvIdleTask+0x8c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a2e:	682b      	ldr	r3, [r5, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d025      	beq.n	8001a80 <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 8001a34:	f000 fcd0 	bl	80023d8 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001a38:	4643      	mov	r3, r8
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a3e:	1d20      	adds	r0, r4, #4
 8001a40:	f7ff ff54 	bl	80018ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001a44:	6833      	ldr	r3, [r6, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001a4a:	682b      	ldr	r3, [r5, #0]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8001a50:	f000 fcce 	bl	80023f0 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8001a54:	0020      	movs	r0, r4
 8001a56:	304c      	adds	r0, #76	; 0x4c
 8001a58:	f000 fe18 	bl	800268c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001a5c:	5de3      	ldrb	r3, [r4, r7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <prvIdleTask+0x56>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d013      	beq.n	8001a8e <prvIdleTask+0x76>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d0e1      	beq.n	8001a2e <prvIdleTask+0x16>
 8001a6a:	b672      	cpsid	i
 8001a6c:	e7fe      	b.n	8001a6c <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 8001a6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001a70:	f000 fdbc 	bl	80025ec <vPortFree>
				vPortFree( pxTCB );
 8001a74:	0020      	movs	r0, r4
 8001a76:	f000 fdb9 	bl	80025ec <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a7a:	682b      	ldr	r3, [r5, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1d9      	bne.n	8001a34 <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a80:	464b      	mov	r3, r9
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d9d2      	bls.n	8001a2e <prvIdleTask+0x16>
				taskYIELD();
 8001a88:	f000 fc9a 	bl	80023c0 <vPortYield>
 8001a8c:	e7cf      	b.n	8001a2e <prvIdleTask+0x16>
				vPortFree( pxTCB );
 8001a8e:	0020      	movs	r0, r4
 8001a90:	f000 fdac 	bl	80025ec <vPortFree>
 8001a94:	e7cb      	b.n	8001a2e <prvIdleTask+0x16>
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	20000480 	.word	0x20000480
 8001a9c:	20000380 	.word	0x20000380
 8001aa0:	20000410 	.word	0x20000410
 8001aa4:	2000040c 	.word	0x2000040c

08001aa8 <xTaskCreateStatic>:
	{
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	4647      	mov	r7, r8
 8001aac:	46ce      	mov	lr, r9
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	001f      	movs	r7, r3
		configASSERT( puxStackBuffer != NULL );
 8001ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	{
 8001ab6:	0005      	movs	r5, r0
 8001ab8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00a      	beq.n	8001ad4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8001abe:	2c00      	cmp	r4, #0
 8001ac0:	d006      	beq.n	8001ad0 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001ac2:	23a0      	movs	r3, #160	; 0xa0
 8001ac4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001ac6:	9b01      	ldr	r3, [sp, #4]
 8001ac8:	2ba0      	cmp	r3, #160	; 0xa0
 8001aca:	d005      	beq.n	8001ad8 <xTaskCreateStatic+0x30>
 8001acc:	b672      	cpsid	i
 8001ace:	e7fe      	b.n	8001ace <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001ad0:	b672      	cpsid	i
 8001ad2:	e7fe      	b.n	8001ad2 <xTaskCreateStatic+0x2a>
		configASSERT( puxStackBuffer != NULL );
 8001ad4:	b672      	cpsid	i
 8001ad6:	e7fe      	b.n	8001ad6 <xTaskCreateStatic+0x2e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001ada:	2002      	movs	r0, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001adc:	6323      	str	r3, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001ade:	239d      	movs	r3, #157	; 0x9d
 8001ae0:	54e0      	strb	r0, [r4, r3]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <xTaskCreateStatic+0x164>)
 8001ae4:	469c      	mov	ip, r3
 8001ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ae8:	4462      	add	r2, ip
 8001aea:	469c      	mov	ip, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001aec:	2307      	movs	r3, #7
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001aee:	0096      	lsls	r6, r2, #2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001af0:	2234      	movs	r2, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001af2:	4466      	add	r6, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001af4:	439e      	bics	r6, r3
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001af6:	780b      	ldrb	r3, [r1, #0]
 8001af8:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d048      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001afe:	784b      	ldrb	r3, [r1, #1]
 8001b00:	3201      	adds	r2, #1
 8001b02:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d043      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b08:	788b      	ldrb	r3, [r1, #2]
 8001b0a:	3201      	adds	r2, #1
 8001b0c:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d03e      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b12:	78cb      	ldrb	r3, [r1, #3]
 8001b14:	3201      	adds	r2, #1
 8001b16:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d039      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b1c:	790b      	ldrb	r3, [r1, #4]
 8001b1e:	3201      	adds	r2, #1
 8001b20:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d034      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b26:	794b      	ldrb	r3, [r1, #5]
 8001b28:	3201      	adds	r2, #1
 8001b2a:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d02f      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b30:	798b      	ldrb	r3, [r1, #6]
 8001b32:	3201      	adds	r2, #1
 8001b34:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d02a      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b3a:	79cb      	ldrb	r3, [r1, #7]
 8001b3c:	3201      	adds	r2, #1
 8001b3e:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d025      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b44:	7a0b      	ldrb	r3, [r1, #8]
 8001b46:	3201      	adds	r2, #1
 8001b48:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d020      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b4e:	7a4b      	ldrb	r3, [r1, #9]
 8001b50:	3201      	adds	r2, #1
 8001b52:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01b      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b58:	7a8b      	ldrb	r3, [r1, #10]
 8001b5a:	3201      	adds	r2, #1
 8001b5c:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d016      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b62:	7acb      	ldrb	r3, [r1, #11]
 8001b64:	3201      	adds	r2, #1
 8001b66:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d011      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b6c:	7b0b      	ldrb	r3, [r1, #12]
 8001b6e:	3201      	adds	r2, #1
 8001b70:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00c      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b76:	7b4b      	ldrb	r3, [r1, #13]
 8001b78:	3201      	adds	r2, #1
 8001b7a:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b80:	7b8b      	ldrb	r3, [r1, #14]
 8001b82:	3201      	adds	r2, #1
 8001b84:	54a3      	strb	r3, [r4, r2]
		if( pcName[ x ] == 0x00 )
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <xTaskCreateStatic+0xe8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b8a:	2343      	movs	r3, #67	; 0x43
 8001b8c:	7bca      	ldrb	r2, [r1, #15]
 8001b8e:	54e2      	strb	r2, [r4, r3]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b90:	2343      	movs	r3, #67	; 0x43
 8001b92:	2200      	movs	r2, #0
 8001b94:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b98:	4698      	mov	r8, r3
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d833      	bhi.n	8001c06 <xTaskCreateStatic+0x15e>
	pxNewTCB->uxPriority = uxPriority;
 8001b9e:	4643      	mov	r3, r8
 8001ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001ba2:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001ba4:	2300      	movs	r3, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ba6:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8001ba8:	64a3      	str	r3, [r4, #72]	; 0x48
 8001baa:	4699      	mov	r9, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001bac:	f7ff fe76 	bl	800189c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001bb0:	0020      	movs	r0, r4
 8001bb2:	3018      	adds	r0, #24
 8001bb4:	f7ff fe72 	bl	800189c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bb8:	4642      	mov	r2, r8
 8001bba:	2307      	movs	r3, #7
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8001bc0:	464a      	mov	r2, r9
 8001bc2:	2398      	movs	r3, #152	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001bc4:	0020      	movs	r0, r4
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001bc6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001bc8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001bca:	50e2      	str	r2, [r4, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001bcc:	3304      	adds	r3, #4
 8001bce:	54e2      	strb	r2, [r4, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	324c      	adds	r2, #76	; 0x4c
 8001bd4:	304c      	adds	r0, #76	; 0x4c
 8001bd6:	f000 fd51 	bl	800267c <memset>
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <xTaskCreateStatic+0x168>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bdc:	0029      	movs	r1, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001bde:	001a      	movs	r2, r3
 8001be0:	6523      	str	r3, [r4, #80]	; 0x50
 8001be2:	3268      	adds	r2, #104	; 0x68
 8001be4:	33d0      	adds	r3, #208	; 0xd0
 8001be6:	6562      	str	r2, [r4, #84]	; 0x54
 8001be8:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bea:	003a      	movs	r2, r7
 8001bec:	0030      	movs	r0, r6
 8001bee:	f000 fb99 	bl	8002324 <pxPortInitialiseStack>
 8001bf2:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8001bf4:	0020      	movs	r0, r4
 8001bf6:	f7ff fe8b 	bl	8001910 <prvAddNewTaskToReadyList>
	}
 8001bfa:	0020      	movs	r0, r4
 8001bfc:	b003      	add	sp, #12
 8001bfe:	bcc0      	pop	{r6, r7}
 8001c00:	46b9      	mov	r9, r7
 8001c02:	46b0      	mov	r8, r6
 8001c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c06:	2306      	movs	r3, #6
 8001c08:	4698      	mov	r8, r3
 8001c0a:	e7c8      	b.n	8001b9e <xTaskCreateStatic+0xf6>
 8001c0c:	3fffffff 	.word	0x3fffffff
 8001c10:	20000cb4 	.word	0x20000cb4

08001c14 <xTaskCreate>:
	{
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	464e      	mov	r6, r9
 8001c18:	4645      	mov	r5, r8
 8001c1a:	46de      	mov	lr, fp
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	b5e0      	push	{r5, r6, r7, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c20:	0097      	lsls	r7, r2, #2
	{
 8001c22:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c24:	0038      	movs	r0, r7
	{
 8001c26:	000d      	movs	r5, r1
 8001c28:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c2a:	f000 fc2d 	bl	8002488 <pvPortMalloc>
 8001c2e:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 8001c30:	d100      	bne.n	8001c34 <xTaskCreate+0x20>
 8001c32:	e09a      	b.n	8001d6a <xTaskCreate+0x156>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c34:	20a0      	movs	r0, #160	; 0xa0
 8001c36:	f000 fc27 	bl	8002488 <pvPortMalloc>
 8001c3a:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 8001c3c:	d100      	bne.n	8001c40 <xTaskCreate+0x2c>
 8001c3e:	e09a      	b.n	8001d76 <xTaskCreate+0x162>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c40:	239d      	movs	r3, #157	; 0x9d
 8001c42:	2200      	movs	r2, #0
					pxNewTCB->pxStack = pxStack;
 8001c44:	6306      	str	r6, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c46:	54c2      	strb	r2, [r0, r3]
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c48:	782b      	ldrb	r3, [r5, #0]
 8001c4a:	3234      	adds	r2, #52	; 0x34
 8001c4c:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d048      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c52:	786b      	ldrb	r3, [r5, #1]
 8001c54:	3201      	adds	r2, #1
 8001c56:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d043      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c5c:	78ab      	ldrb	r3, [r5, #2]
 8001c5e:	3201      	adds	r2, #1
 8001c60:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d03e      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c66:	78eb      	ldrb	r3, [r5, #3]
 8001c68:	3201      	adds	r2, #1
 8001c6a:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d039      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c70:	792b      	ldrb	r3, [r5, #4]
 8001c72:	3201      	adds	r2, #1
 8001c74:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d034      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c7a:	796b      	ldrb	r3, [r5, #5]
 8001c7c:	3201      	adds	r2, #1
 8001c7e:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d02f      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c84:	79ab      	ldrb	r3, [r5, #6]
 8001c86:	3201      	adds	r2, #1
 8001c88:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d02a      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c8e:	79eb      	ldrb	r3, [r5, #7]
 8001c90:	3201      	adds	r2, #1
 8001c92:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d025      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c98:	7a2b      	ldrb	r3, [r5, #8]
 8001c9a:	3201      	adds	r2, #1
 8001c9c:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ca2:	7a6b      	ldrb	r3, [r5, #9]
 8001ca4:	3201      	adds	r2, #1
 8001ca6:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cac:	7aab      	ldrb	r3, [r5, #10]
 8001cae:	3201      	adds	r2, #1
 8001cb0:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d016      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cb6:	7aeb      	ldrb	r3, [r5, #11]
 8001cb8:	3201      	adds	r2, #1
 8001cba:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d011      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cc0:	7b2b      	ldrb	r3, [r5, #12]
 8001cc2:	3201      	adds	r2, #1
 8001cc4:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cca:	7b6b      	ldrb	r3, [r5, #13]
 8001ccc:	3201      	adds	r2, #1
 8001cce:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cd4:	7bab      	ldrb	r3, [r5, #14]
 8001cd6:	3201      	adds	r2, #1
 8001cd8:	5483      	strb	r3, [r0, r2]
		if( pcName[ x ] == 0x00 )
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <xTaskCreate+0xd0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cde:	2343      	movs	r3, #67	; 0x43
 8001ce0:	7bea      	ldrb	r2, [r5, #15]
 8001ce2:	54c2      	strb	r2, [r0, r3]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ce4:	2343      	movs	r3, #67	; 0x43
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cec:	469a      	mov	sl, r3
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d83e      	bhi.n	8001d70 <xTaskCreate+0x15c>
	pxNewTCB->uxPriority = uxPriority;
 8001cf2:	4653      	mov	r3, sl
 8001cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001cf6:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001cf8:	2300      	movs	r3, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cfa:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8001cfc:	64a3      	str	r3, [r4, #72]	; 0x48
 8001cfe:	469b      	mov	fp, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d00:	f7ff fdcc 	bl	800189c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d04:	0020      	movs	r0, r4
 8001d06:	3018      	adds	r0, #24
 8001d08:	f7ff fdc8 	bl	800189c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d0c:	2507      	movs	r5, #7
 8001d0e:	4653      	mov	r3, sl
 8001d10:	1aeb      	subs	r3, r5, r3
 8001d12:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8001d14:	465a      	mov	r2, fp
 8001d16:	2398      	movs	r3, #152	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001d18:	0020      	movs	r0, r4
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d1a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d1c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001d1e:	50e2      	str	r2, [r4, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d20:	3304      	adds	r3, #4
 8001d22:	54e2      	strb	r2, [r4, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001d24:	2100      	movs	r1, #0
 8001d26:	324c      	adds	r2, #76	; 0x4c
 8001d28:	304c      	adds	r0, #76	; 0x4c
 8001d2a:	f000 fca7 	bl	800267c <memset>
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <xTaskCreate+0x170>)
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d30:	3f04      	subs	r7, #4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001d32:	001a      	movs	r2, r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d34:	19f6      	adds	r6, r6, r7
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001d36:	0030      	movs	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001d38:	6523      	str	r3, [r4, #80]	; 0x50
 8001d3a:	3268      	adds	r2, #104	; 0x68
 8001d3c:	33d0      	adds	r3, #208	; 0xd0
 8001d3e:	6562      	str	r2, [r4, #84]	; 0x54
 8001d40:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d42:	464a      	mov	r2, r9
 8001d44:	4641      	mov	r1, r8
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001d46:	43a8      	bics	r0, r5
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d48:	f000 faec 	bl	8002324 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 8001d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d4e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d000      	beq.n	8001d56 <xTaskCreate+0x142>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d54:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d56:	0020      	movs	r0, r4
 8001d58:	f7ff fdda 	bl	8001910 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d5c:	2001      	movs	r0, #1
	}
 8001d5e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d60:	46bb      	mov	fp, r7
 8001d62:	46b2      	mov	sl, r6
 8001d64:	46a9      	mov	r9, r5
 8001d66:	46a0      	mov	r8, r4
 8001d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	4240      	negs	r0, r0
		return xReturn;
 8001d6e:	e7f6      	b.n	8001d5e <xTaskCreate+0x14a>
 8001d70:	2306      	movs	r3, #6
 8001d72:	469a      	mov	sl, r3
 8001d74:	e7bd      	b.n	8001cf2 <xTaskCreate+0xde>
					vPortFree( pxStack );
 8001d76:	0030      	movs	r0, r6
 8001d78:	f000 fc38 	bl	80025ec <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	4240      	negs	r0, r0
 8001d80:	e7ed      	b.n	8001d5e <xTaskCreate+0x14a>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	20000cb4 	.word	0x20000cb4

08001d88 <vTaskStartScheduler>:
{
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d8a:	2400      	movs	r4, #0
{
 8001d8c:	b085      	sub	sp, #20
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d8e:	aa02      	add	r2, sp, #8
 8001d90:	4668      	mov	r0, sp
 8001d92:	a901      	add	r1, sp, #4
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d94:	9400      	str	r4, [sp, #0]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d96:	9401      	str	r4, [sp, #4]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d98:	f7fe fa42 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001d9c:	9b01      	ldr	r3, [sp, #4]
 8001d9e:	9a02      	ldr	r2, [sp, #8]
 8001da0:	9d00      	ldr	r5, [sp, #0]
		configASSERT( puxStackBuffer != NULL );
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <vTaskStartScheduler+0x34>
		configASSERT( pxTaskBuffer != NULL );
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	d006      	beq.n	8001db8 <vTaskStartScheduler+0x30>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001daa:	21a0      	movs	r1, #160	; 0xa0
 8001dac:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001dae:	9903      	ldr	r1, [sp, #12]
 8001db0:	29a0      	cmp	r1, #160	; 0xa0
 8001db2:	d005      	beq.n	8001dc0 <vTaskStartScheduler+0x38>
 8001db4:	b672      	cpsid	i
 8001db6:	e7fe      	b.n	8001db6 <vTaskStartScheduler+0x2e>
		configASSERT( pxTaskBuffer != NULL );
 8001db8:	b672      	cpsid	i
 8001dba:	e7fe      	b.n	8001dba <vTaskStartScheduler+0x32>
		configASSERT( puxStackBuffer != NULL );
 8001dbc:	b672      	cpsid	i
 8001dbe:	e7fe      	b.n	8001dbe <vTaskStartScheduler+0x36>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001dc0:	219d      	movs	r1, #157	; 0x9d
 8001dc2:	2002      	movs	r0, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001dc4:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001dc6:	5468      	strb	r0, [r5, r1]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001dc8:	4923      	ldr	r1, [pc, #140]	; (8001e58 <vTaskStartScheduler+0xd0>)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001dca:	2707      	movs	r7, #7
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001dcc:	468c      	mov	ip, r1
 8001dce:	4462      	add	r2, ip
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	189b      	adds	r3, r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001dd4:	43bb      	bics	r3, r7
 8001dd6:	001e      	movs	r6, r3
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <vTaskStartScheduler+0xd4>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001dda:	1d28      	adds	r0, r5, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ddc:	636b      	str	r3, [r5, #52]	; 0x34
 8001dde:	2338      	movs	r3, #56	; 0x38
 8001de0:	54ec      	strb	r4, [r5, r3]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001de2:	330b      	adds	r3, #11
 8001de4:	54ec      	strb	r4, [r5, r3]
	pxNewTCB->uxPriority = uxPriority;
 8001de6:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001de8:	646c      	str	r4, [r5, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001dea:	64ac      	str	r4, [r5, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001dec:	f7ff fd56 	bl	800189c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001df0:	0028      	movs	r0, r5
 8001df2:	3018      	adds	r0, #24
 8001df4:	f7ff fd52 	bl	800189c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001df8:	2398      	movs	r3, #152	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001dfa:	0028      	movs	r0, r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001dfc:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dfe:	61af      	str	r7, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e00:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001e02:	50ec      	str	r4, [r5, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e04:	3304      	adds	r3, #4
 8001e06:	54ec      	strb	r4, [r5, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001e08:	224c      	movs	r2, #76	; 0x4c
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	304c      	adds	r0, #76	; 0x4c
 8001e0e:	f000 fc35 	bl	800267c <memset>
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <vTaskStartScheduler+0xd8>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e14:	4913      	ldr	r1, [pc, #76]	; (8001e64 <vTaskStartScheduler+0xdc>)
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001e16:	001a      	movs	r2, r3
 8001e18:	652b      	str	r3, [r5, #80]	; 0x50
 8001e1a:	3268      	adds	r2, #104	; 0x68
 8001e1c:	33d0      	adds	r3, #208	; 0xd0
 8001e1e:	656a      	str	r2, [r5, #84]	; 0x54
 8001e20:	65ab      	str	r3, [r5, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e22:	2200      	movs	r2, #0
 8001e24:	0030      	movs	r0, r6
 8001e26:	f000 fa7d 	bl	8002324 <pxPortInitialiseStack>
 8001e2a:	6028      	str	r0, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e2c:	0028      	movs	r0, r5
 8001e2e:	f7ff fd6f 	bl	8001910 <prvAddNewTaskToReadyList>
		portDISABLE_INTERRUPTS();
 8001e32:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <vTaskStartScheduler+0xe0>)
 8001e36:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <vTaskStartScheduler+0xe4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	334c      	adds	r3, #76	; 0x4c
 8001e3c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <vTaskStartScheduler+0xe8>)
 8001e42:	4252      	negs	r2, r2
 8001e44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <vTaskStartScheduler+0xec>)
 8001e48:	3202      	adds	r2, #2
 8001e4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <vTaskStartScheduler+0xf0>)
 8001e4e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001e50:	f000 fa7a 	bl	8002348 <xPortStartScheduler>
}
 8001e54:	b005      	add	sp, #20
 8001e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e58:	3fffffff 	.word	0x3fffffff
 8001e5c:	454c4449 	.word	0x454c4449
 8001e60:	20000cb4 	.word	0x20000cb4
 8001e64:	08001a19 	.word	0x08001a19
 8001e68:	20000374 	.word	0x20000374
 8001e6c:	2000005c 	.word	0x2000005c
 8001e70:	2000044c 	.word	0x2000044c
 8001e74:	20000468 	.word	0x20000468
 8001e78:	20000494 	.word	0x20000494

08001e7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001e7c:	4a02      	ldr	r2, [pc, #8]	; (8001e88 <vTaskSuspendAll+0xc>)
 8001e7e:	6813      	ldr	r3, [r2, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	4770      	bx	lr
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	20000418 	.word	0x20000418

08001e8c <xTaskIncrementTick>:
{
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8e:	46de      	mov	lr, fp
 8001e90:	4657      	mov	r7, sl
 8001e92:	464e      	mov	r6, r9
 8001e94:	4645      	mov	r5, r8
 8001e96:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e98:	4b52      	ldr	r3, [pc, #328]	; (8001fe4 <xTaskIncrementTick+0x158>)
{
 8001e9a:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d14a      	bne.n	8001f38 <xTaskIncrementTick+0xac>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001ea2:	4b51      	ldr	r3, [pc, #324]	; (8001fe8 <xTaskIncrementTick+0x15c>)
 8001ea4:	681e      	ldr	r6, [r3, #0]
 8001ea6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8001ea8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001eaa:	2e00      	cmp	r6, #0
 8001eac:	d058      	beq.n	8001f60 <xTaskIncrementTick+0xd4>
 8001eae:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <xTaskIncrementTick+0x160>)
 8001eb0:	469a      	mov	sl, r3
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001eb2:	4653      	mov	r3, sl
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	42b3      	cmp	r3, r6
 8001eb8:	d86b      	bhi.n	8001f92 <xTaskIncrementTick+0x106>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001eba:	4f4d      	ldr	r7, [pc, #308]	; (8001ff0 <xTaskIncrementTick+0x164>)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d100      	bne.n	8001ec6 <xTaskIncrementTick+0x3a>
 8001ec4:	e07a      	b.n	8001fbc <xTaskIncrementTick+0x130>
BaseType_t xSwitchRequired = pdFALSE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	4698      	mov	r8, r3
 8001eca:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <xTaskIncrementTick+0x168>)
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	4b4a      	ldr	r3, [pc, #296]	; (8001ff8 <xTaskIncrementTick+0x16c>)
 8001ed0:	469b      	mov	fp, r3
					prvAddTaskToReadyList( pxTCB );
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <xTaskIncrementTick+0x170>)
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	e026      	b.n	8001f26 <xTaskIncrementTick+0x9a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ed8:	1d25      	adds	r5, r4, #4
 8001eda:	0028      	movs	r0, r5
 8001edc:	f7ff fd06 	bl	80018ec <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <xTaskIncrementTick+0x62>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ee6:	0020      	movs	r0, r4
 8001ee8:	3018      	adds	r0, #24
 8001eea:	f7ff fcff 	bl	80018ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001eee:	464a      	mov	r2, r9
 8001ef0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <xTaskIncrementTick+0x70>
 8001ef8:	464a      	mov	r2, r9
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	0098      	lsls	r0, r3, #2
 8001efe:	18c0      	adds	r0, r0, r3
 8001f00:	9b01      	ldr	r3, [sp, #4]
 8001f02:	0080      	lsls	r0, r0, #2
 8001f04:	469c      	mov	ip, r3
 8001f06:	0029      	movs	r1, r5
 8001f08:	4460      	add	r0, ip
 8001f0a:	f7ff fccb 	bl	80018a4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f0e:	465b      	mov	r3, fp
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d301      	bcc.n	8001f1e <xTaskIncrementTick+0x92>
							xSwitchRequired = pdTRUE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	4698      	mov	r8, r3
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d050      	beq.n	8001fc8 <xTaskIncrementTick+0x13c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f2c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8001f2e:	429e      	cmp	r6, r3
 8001f30:	d2d2      	bcs.n	8001ed8 <xTaskIncrementTick+0x4c>
						xNextTaskUnblockTime = xItemValue;
 8001f32:	4652      	mov	r2, sl
 8001f34:	6013      	str	r3, [r2, #0]
						break;
 8001f36:	e032      	b.n	8001f9e <xTaskIncrementTick+0x112>
		++uxPendedTicks;
 8001f38:	4a31      	ldr	r2, [pc, #196]	; (8002000 <xTaskIncrementTick+0x174>)
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	4698      	mov	r8, r3
		if( xYieldPending != pdFALSE )
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <xTaskIncrementTick+0x178>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <xTaskIncrementTick+0xc4>
			xSwitchRequired = pdTRUE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	4698      	mov	r8, r3
}
 8001f50:	4640      	mov	r0, r8
 8001f52:	b003      	add	sp, #12
 8001f54:	bcf0      	pop	{r4, r5, r6, r7}
 8001f56:	46bb      	mov	fp, r7
 8001f58:	46b2      	mov	sl, r6
 8001f5a:	46a9      	mov	r9, r5
 8001f5c:	46a0      	mov	r8, r4
 8001f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			taskSWITCH_DELAYED_LISTS();
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <xTaskIncrementTick+0x164>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	2a00      	cmp	r2, #0
 8001f68:	d126      	bne.n	8001fb8 <xTaskIncrementTick+0x12c>
 8001f6a:	4a27      	ldr	r2, [pc, #156]	; (8002008 <xTaskIncrementTick+0x17c>)
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	6810      	ldr	r0, [r2, #0]
 8001f70:	6018      	str	r0, [r3, #0]
 8001f72:	6011      	str	r1, [r2, #0]
 8001f74:	4925      	ldr	r1, [pc, #148]	; (800200c <xTaskIncrementTick+0x180>)
 8001f76:	680a      	ldr	r2, [r1, #0]
 8001f78:	3201      	adds	r2, #1
 8001f7a:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d126      	bne.n	8001fd2 <xTaskIncrementTick+0x146>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <xTaskIncrementTick+0x160>)
 8001f86:	469a      	mov	sl, r3
 8001f88:	2301      	movs	r3, #1
 8001f8a:	4652      	mov	r2, sl
 8001f8c:	425b      	negs	r3, r3
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e78f      	b.n	8001eb2 <xTaskIncrementTick+0x26>
BaseType_t xSwitchRequired = pdFALSE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	4698      	mov	r8, r3
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <xTaskIncrementTick+0x168>)
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <xTaskIncrementTick+0x16c>)
 8001f9c:	469b      	mov	fp, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f9e:	465b      	mov	r3, fp
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa4:	0093      	lsls	r3, r2, #2
 8001fa6:	189b      	adds	r3, r3, r2
 8001fa8:	9a01      	ldr	r2, [sp, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	58d3      	ldr	r3, [r2, r3]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d9c8      	bls.n	8001f44 <xTaskIncrementTick+0xb8>
				xSwitchRequired = pdTRUE;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	4698      	mov	r8, r3
 8001fb6:	e7c5      	b.n	8001f44 <xTaskIncrementTick+0xb8>
			taskSWITCH_DELAYED_LISTS();
 8001fb8:	b672      	cpsid	i
 8001fba:	e7fe      	b.n	8001fba <xTaskIncrementTick+0x12e>
BaseType_t xSwitchRequired = pdFALSE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	4698      	mov	r8, r3
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <xTaskIncrementTick+0x168>)
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <xTaskIncrementTick+0x16c>)
 8001fc6:	469b      	mov	fp, r3
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fc8:	2301      	movs	r3, #1
 8001fca:	4652      	mov	r2, sl
 8001fcc:	425b      	negs	r3, r3
 8001fce:	6013      	str	r3, [r2, #0]
					break;
 8001fd0:	e7e5      	b.n	8001f9e <xTaskIncrementTick+0x112>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fd2:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001fd4:	4a05      	ldr	r2, [pc, #20]	; (8001fec <xTaskIncrementTick+0x160>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fd6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001fd8:	4692      	mov	sl, r2
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	6013      	str	r3, [r2, #0]
	}
}
 8001fe0:	e767      	b.n	8001eb2 <xTaskIncrementTick+0x26>
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	20000418 	.word	0x20000418
 8001fe8:	20000494 	.word	0x20000494
 8001fec:	2000044c 	.word	0x2000044c
 8001ff0:	20000378 	.word	0x20000378
 8001ff4:	20000380 	.word	0x20000380
 8001ff8:	20000374 	.word	0x20000374
 8001ffc:	20000420 	.word	0x20000420
 8002000:	20000414 	.word	0x20000414
 8002004:	20000498 	.word	0x20000498
 8002008:	2000037c 	.word	0x2000037c
 800200c:	20000450 	.word	0x20000450

08002010 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	46de      	mov	lr, fp
 8002014:	4657      	mov	r7, sl
 8002016:	464e      	mov	r6, r9
 8002018:	4645      	mov	r5, r8
 800201a:	b5e0      	push	{r5, r6, r7, lr}
	taskENTER_CRITICAL();
 800201c:	f000 f9dc 	bl	80023d8 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002020:	4b3a      	ldr	r3, [pc, #232]	; (800210c <xTaskResumeAll.part.0+0xfc>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	3a01      	subs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d154      	bne.n	80020d8 <xTaskResumeAll.part.0+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800202e:	4b38      	ldr	r3, [pc, #224]	; (8002110 <xTaskResumeAll.part.0+0x100>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d050      	beq.n	80020d8 <xTaskResumeAll.part.0+0xc8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002036:	4e37      	ldr	r6, [pc, #220]	; (8002114 <xTaskResumeAll.part.0+0x104>)
 8002038:	6833      	ldr	r3, [r6, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d062      	beq.n	8002104 <xTaskResumeAll.part.0+0xf4>
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <xTaskResumeAll.part.0+0x108>)
 8002040:	4f36      	ldr	r7, [pc, #216]	; (800211c <xTaskResumeAll.part.0+0x10c>)
 8002042:	4699      	mov	r9, r3
 8002044:	4b36      	ldr	r3, [pc, #216]	; (8002120 <xTaskResumeAll.part.0+0x110>)
 8002046:	4698      	mov	r8, r3
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <xTaskResumeAll.part.0+0x114>)
 800204a:	469a      	mov	sl, r3
						xYieldPending = pdTRUE;
 800204c:	2301      	movs	r3, #1
 800204e:	469b      	mov	fp, r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002050:	68f3      	ldr	r3, [r6, #12]
 8002052:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002054:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002056:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002058:	3018      	adds	r0, #24
 800205a:	f7ff fc47 	bl	80018ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800205e:	0028      	movs	r0, r5
 8002060:	f7ff fc44 	bl	80018ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	4293      	cmp	r3, r2
 800206a:	d900      	bls.n	800206e <xTaskResumeAll.part.0+0x5e>
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	0098      	lsls	r0, r3, #2
 8002070:	18c0      	adds	r0, r0, r3
 8002072:	0080      	lsls	r0, r0, #2
 8002074:	0029      	movs	r1, r5
 8002076:	4448      	add	r0, r9
 8002078:	f7ff fc14 	bl	80018a4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800207c:	4643      	mov	r3, r8
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	429a      	cmp	r2, r3
 8002086:	d331      	bcc.n	80020ec <xTaskResumeAll.part.0+0xdc>
						xYieldPending = pdTRUE;
 8002088:	4653      	mov	r3, sl
 800208a:	465a      	mov	r2, fp
 800208c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800208e:	6833      	ldr	r3, [r6, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1dd      	bne.n	8002050 <xTaskResumeAll.part.0+0x40>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <xTaskResumeAll.part.0+0x118>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	2a00      	cmp	r2, #0
 800209c:	d02e      	beq.n	80020fc <xTaskResumeAll.part.0+0xec>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <xTaskResumeAll.part.0+0x11c>)
 80020a8:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80020aa:	4e21      	ldr	r6, [pc, #132]	; (8002130 <xTaskResumeAll.part.0+0x120>)
 80020ac:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80020ae:	2c00      	cmp	r4, #0
 80020b0:	d00a      	beq.n	80020c8 <xTaskResumeAll.part.0+0xb8>
								xYieldPending = pdTRUE;
 80020b2:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 80020b4:	f7ff feea 	bl	8001e8c <xTaskIncrementTick>
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d001      	beq.n	80020c0 <xTaskResumeAll.part.0+0xb0>
								xYieldPending = pdTRUE;
 80020bc:	4653      	mov	r3, sl
 80020be:	601d      	str	r5, [r3, #0]
							--uxPendedCounts;
 80020c0:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80020c2:	2c00      	cmp	r4, #0
 80020c4:	d1f6      	bne.n	80020b4 <xTaskResumeAll.part.0+0xa4>
						uxPendedTicks = 0;
 80020c6:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80020c8:	4653      	mov	r3, sl
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <xTaskResumeAll.part.0+0xc8>
					taskYIELD_IF_USING_PREEMPTION();
 80020d0:	f000 f976 	bl	80023c0 <vPortYield>
						xAlreadyYielded = pdTRUE;
 80020d4:	2401      	movs	r4, #1
 80020d6:	e000      	b.n	80020da <xTaskResumeAll.part.0+0xca>
BaseType_t xAlreadyYielded = pdFALSE;
 80020d8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80020da:	f000 f989 	bl	80023f0 <vPortExitCritical>
}
 80020de:	0020      	movs	r0, r4
 80020e0:	bcf0      	pop	{r4, r5, r6, r7}
 80020e2:	46bb      	mov	fp, r7
 80020e4:	46b2      	mov	sl, r6
 80020e6:	46a9      	mov	r9, r5
 80020e8:	46a0      	mov	r8, r4
 80020ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020ec:	6833      	ldr	r3, [r6, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ae      	bne.n	8002050 <xTaskResumeAll.part.0+0x40>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <xTaskResumeAll.part.0+0x118>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	2a00      	cmp	r2, #0
 80020fa:	d1d0      	bne.n	800209e <xTaskResumeAll.part.0+0x8e>
		xNextTaskUnblockTime = portMAX_DELAY;
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <xTaskResumeAll.part.0+0x11c>)
 80020fe:	3a01      	subs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e7d2      	b.n	80020aa <xTaskResumeAll.part.0+0x9a>
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <xTaskResumeAll.part.0+0x114>)
 8002106:	469a      	mov	sl, r3
 8002108:	e7cf      	b.n	80020aa <xTaskResumeAll.part.0+0x9a>
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	20000418 	.word	0x20000418
 8002110:	2000040c 	.word	0x2000040c
 8002114:	20000454 	.word	0x20000454
 8002118:	20000380 	.word	0x20000380
 800211c:	20000420 	.word	0x20000420
 8002120:	20000374 	.word	0x20000374
 8002124:	20000498 	.word	0x20000498
 8002128:	20000378 	.word	0x20000378
 800212c:	2000044c 	.word	0x2000044c
 8002130:	20000414 	.word	0x20000414

08002134 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <xTaskResumeAll+0x14>)
{
 8002136:	b510      	push	{r4, lr}
	configASSERT( uxSchedulerSuspended );
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <xTaskResumeAll+0xe>
 800213e:	b672      	cpsid	i
 8002140:	e7fe      	b.n	8002140 <xTaskResumeAll+0xc>
 8002142:	f7ff ff65 	bl	8002010 <xTaskResumeAll.part.0>
}
 8002146:	bd10      	pop	{r4, pc}
 8002148:	20000418 	.word	0x20000418

0800214c <vTaskDelay>:
	{
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002150:	d028      	beq.n	80021a4 <vTaskDelay+0x58>
			configASSERT( uxSchedulerSuspended == 0 );
 8002152:	4d19      	ldr	r5, [pc, #100]	; (80021b8 <vTaskDelay+0x6c>)
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <vTaskDelay+0x12>
 800215a:	b672      	cpsid	i
 800215c:	e7fe      	b.n	800215c <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800215e:	682b      	ldr	r3, [r5, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002160:	4e16      	ldr	r6, [pc, #88]	; (80021bc <vTaskDelay+0x70>)
	++uxSchedulerSuspended;
 8002162:	3301      	adds	r3, #1
 8002164:	602b      	str	r3, [r5, #0]
const TickType_t xConstTickCount = xTickCount;
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <vTaskDelay+0x74>)
 8002168:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800216a:	6830      	ldr	r0, [r6, #0]
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800216c:	19e4      	adds	r4, r4, r7
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800216e:	3004      	adds	r0, #4
 8002170:	f7ff fbbc 	bl	80018ec <uxListRemove>

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002174:	6833      	ldr	r3, [r6, #0]
 8002176:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002178:	42a7      	cmp	r7, r4
 800217a:	d816      	bhi.n	80021aa <vTaskDelay+0x5e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <vTaskDelay+0x78>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	6831      	ldr	r1, [r6, #0]
 8002182:	3104      	adds	r1, #4
 8002184:	f7ff fb9a 	bl	80018bc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <vTaskDelay+0x7c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4294      	cmp	r4, r2
 800218e:	d200      	bcs.n	8002192 <vTaskDelay+0x46>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002190:	601c      	str	r4, [r3, #0]
	configASSERT( uxSchedulerSuspended );
 8002192:	682b      	ldr	r3, [r5, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <vTaskDelay+0x50>
 8002198:	b672      	cpsid	i
 800219a:	e7fe      	b.n	800219a <vTaskDelay+0x4e>
 800219c:	f7ff ff38 	bl	8002010 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d101      	bne.n	80021a8 <vTaskDelay+0x5c>
			portYIELD_WITHIN_API();
 80021a4:	f000 f90c 	bl	80023c0 <vPortYield>
	}
 80021a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <vTaskDelay+0x80>)
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	6831      	ldr	r1, [r6, #0]
 80021b0:	3104      	adds	r1, #4
 80021b2:	f7ff fb83 	bl	80018bc <vListInsert>
 80021b6:	e7ec      	b.n	8002192 <vTaskDelay+0x46>
 80021b8:	20000418 	.word	0x20000418
 80021bc:	20000374 	.word	0x20000374
 80021c0:	20000494 	.word	0x20000494
 80021c4:	20000378 	.word	0x20000378
 80021c8:	2000044c 	.word	0x2000044c
 80021cc:	2000037c 	.word	0x2000037c

080021d0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021d0:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <vTaskSwitchContext+0xe0>)
{
 80021d2:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80021da:	2201      	movs	r2, #1
 80021dc:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <vTaskSwitchContext+0xe4>)
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	bd30      	pop	{r4, r5, pc}
		xYieldPending = pdFALSE;
 80021e2:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <vTaskSwitchContext+0xe4>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021e4:	4834      	ldr	r0, [pc, #208]	; (80022b8 <vTaskSwitchContext+0xe8>)
		xYieldPending = pdFALSE;
 80021e6:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021e8:	6802      	ldr	r2, [r0, #0]
 80021ea:	4934      	ldr	r1, [pc, #208]	; (80022bc <vTaskSwitchContext+0xec>)
 80021ec:	0093      	lsls	r3, r2, #2
 80021ee:	189c      	adds	r4, r3, r2
 80021f0:	00a4      	lsls	r4, r4, #2
 80021f2:	590c      	ldr	r4, [r1, r4]
 80021f4:	2c00      	cmp	r4, #0
 80021f6:	d141      	bne.n	800227c <vTaskSwitchContext+0xac>
 80021f8:	2a00      	cmp	r2, #0
 80021fa:	d03c      	beq.n	8002276 <vTaskSwitchContext+0xa6>
 80021fc:	1e54      	subs	r4, r2, #1
 80021fe:	00a3      	lsls	r3, r4, #2
 8002200:	191d      	adds	r5, r3, r4
 8002202:	00ad      	lsls	r5, r5, #2
 8002204:	594d      	ldr	r5, [r1, r5]
 8002206:	2d00      	cmp	r5, #0
 8002208:	d137      	bne.n	800227a <vTaskSwitchContext+0xaa>
 800220a:	2c00      	cmp	r4, #0
 800220c:	d033      	beq.n	8002276 <vTaskSwitchContext+0xa6>
 800220e:	1e94      	subs	r4, r2, #2
 8002210:	00a3      	lsls	r3, r4, #2
 8002212:	191d      	adds	r5, r3, r4
 8002214:	00ad      	lsls	r5, r5, #2
 8002216:	594d      	ldr	r5, [r1, r5]
 8002218:	2d00      	cmp	r5, #0
 800221a:	d12e      	bne.n	800227a <vTaskSwitchContext+0xaa>
 800221c:	2c00      	cmp	r4, #0
 800221e:	d02a      	beq.n	8002276 <vTaskSwitchContext+0xa6>
 8002220:	1ed4      	subs	r4, r2, #3
 8002222:	00a3      	lsls	r3, r4, #2
 8002224:	191d      	adds	r5, r3, r4
 8002226:	00ad      	lsls	r5, r5, #2
 8002228:	594d      	ldr	r5, [r1, r5]
 800222a:	2d00      	cmp	r5, #0
 800222c:	d125      	bne.n	800227a <vTaskSwitchContext+0xaa>
 800222e:	2c00      	cmp	r4, #0
 8002230:	d021      	beq.n	8002276 <vTaskSwitchContext+0xa6>
 8002232:	1f14      	subs	r4, r2, #4
 8002234:	00a3      	lsls	r3, r4, #2
 8002236:	191b      	adds	r3, r3, r4
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	58cb      	ldr	r3, [r1, r3]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d133      	bne.n	80022a8 <vTaskSwitchContext+0xd8>
 8002240:	2c00      	cmp	r4, #0
 8002242:	d018      	beq.n	8002276 <vTaskSwitchContext+0xa6>
 8002244:	1f54      	subs	r4, r2, #5
 8002246:	00a3      	lsls	r3, r4, #2
 8002248:	191d      	adds	r5, r3, r4
 800224a:	00ad      	lsls	r5, r5, #2
 800224c:	594d      	ldr	r5, [r1, r5]
 800224e:	2d00      	cmp	r5, #0
 8002250:	d113      	bne.n	800227a <vTaskSwitchContext+0xaa>
 8002252:	2c00      	cmp	r4, #0
 8002254:	d00f      	beq.n	8002276 <vTaskSwitchContext+0xa6>
 8002256:	1f94      	subs	r4, r2, #6
 8002258:	00a3      	lsls	r3, r4, #2
 800225a:	191d      	adds	r5, r3, r4
 800225c:	00ad      	lsls	r5, r5, #2
 800225e:	594d      	ldr	r5, [r1, r5]
 8002260:	2d00      	cmp	r5, #0
 8002262:	d10a      	bne.n	800227a <vTaskSwitchContext+0xaa>
 8002264:	2c00      	cmp	r4, #0
 8002266:	d006      	beq.n	8002276 <vTaskSwitchContext+0xa6>
 8002268:	3a07      	subs	r2, #7
 800226a:	0093      	lsls	r3, r2, #2
 800226c:	189c      	adds	r4, r3, r2
 800226e:	00a4      	lsls	r4, r4, #2
 8002270:	590c      	ldr	r4, [r1, r4]
 8002272:	2c00      	cmp	r4, #0
 8002274:	d102      	bne.n	800227c <vTaskSwitchContext+0xac>
 8002276:	b672      	cpsid	i
 8002278:	e7fe      	b.n	8002278 <vTaskSwitchContext+0xa8>
 800227a:	0022      	movs	r2, r4
 800227c:	189b      	adds	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	18cd      	adds	r5, r1, r3
 8002282:	686c      	ldr	r4, [r5, #4]
 8002284:	3308      	adds	r3, #8
 8002286:	6864      	ldr	r4, [r4, #4]
 8002288:	18c9      	adds	r1, r1, r3
 800228a:	606c      	str	r4, [r5, #4]
 800228c:	428c      	cmp	r4, r1
 800228e:	d008      	beq.n	80022a2 <vTaskSwitchContext+0xd2>
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <vTaskSwitchContext+0xf0>)
 8002292:	68e1      	ldr	r1, [r4, #12]
 8002294:	6019      	str	r1, [r3, #0]
 8002296:	6002      	str	r2, [r0, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <vTaskSwitchContext+0xf4>)
 800229c:	334c      	adds	r3, #76	; 0x4c
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	e79e      	b.n	80021e0 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022a2:	6864      	ldr	r4, [r4, #4]
 80022a4:	606c      	str	r4, [r5, #4]
 80022a6:	e7f3      	b.n	8002290 <vTaskSwitchContext+0xc0>
 80022a8:	0022      	movs	r2, r4
 80022aa:	00a3      	lsls	r3, r4, #2
 80022ac:	e7e6      	b.n	800227c <vTaskSwitchContext+0xac>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	20000418 	.word	0x20000418
 80022b4:	20000498 	.word	0x20000498
 80022b8:	20000420 	.word	0x20000420
 80022bc:	20000380 	.word	0x20000380
 80022c0:	20000374 	.word	0x20000374
 80022c4:	2000005c 	.word	0x2000005c

080022c8 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 80022c8:	2300      	movs	r3, #0
{
 80022ca:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80022cc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <prvTaskExitError+0x20>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3301      	adds	r3, #1
 80022d4:	d001      	beq.n	80022da <prvTaskExitError+0x12>
 80022d6:	b672      	cpsid	i
 80022d8:	e7fe      	b.n	80022d8 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 80022da:	b672      	cpsid	i
	while( ulDummy == 0 )
 80022dc:	9b01      	ldr	r3, [sp, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0fc      	beq.n	80022dc <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80022e2:	b002      	add	sp, #8
 80022e4:	4770      	bx	lr
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	00000000 	.word	0x00000000

080022f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80022f0:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <pxCurrentTCBConst2>)
 80022f2:	6813      	ldr	r3, [r2, #0]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	3020      	adds	r0, #32
 80022f8:	f380 8809 	msr	PSP, r0
 80022fc:	2002      	movs	r0, #2
 80022fe:	f380 8814 	msr	CONTROL, r0
 8002302:	f3bf 8f6f 	isb	sy
 8002306:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002308:	46ae      	mov	lr, r5
 800230a:	bc08      	pop	{r3}
 800230c:	bc04      	pop	{r2}
 800230e:	b662      	cpsie	i
 8002310:	4718      	bx	r3
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46c0      	nop			; (mov r8, r8)

08002320 <pxCurrentTCBConst2>:
 8002320:	20000374 	.word	0x20000374

08002324 <pxPortInitialiseStack>:
{
 8002324:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002326:	2480      	movs	r4, #128	; 0x80
 8002328:	1f03      	subs	r3, r0, #4
 800232a:	0464      	lsls	r4, r4, #17
 800232c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800232e:	3b04      	subs	r3, #4
 8002330:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002332:	4903      	ldr	r1, [pc, #12]	; (8002340 <pxPortInitialiseStack+0x1c>)
 8002334:	3b04      	subs	r3, #4
 8002336:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002338:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800233a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800233c:	601a      	str	r2, [r3, #0]
}
 800233e:	bd10      	pop	{r4, pc}
 8002340:	080022c9 	.word	0x080022c9

08002344 <SVC_Handler>:
}
 8002344:	4770      	bx	lr
 8002346:	46c0      	nop			; (mov r8, r8)

08002348 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002348:	22ff      	movs	r2, #255	; 0xff
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <xPortStartScheduler+0x60>)
 800234c:	0412      	lsls	r2, r2, #16
 800234e:	6819      	ldr	r1, [r3, #0]
{
 8002350:	b530      	push	{r4, r5, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002356:	22ff      	movs	r2, #255	; 0xff
 8002358:	6819      	ldr	r1, [r3, #0]
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800235a:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800235c:	0612      	lsls	r2, r2, #24
 800235e:	430a      	orrs	r2, r1
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002360:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002362:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = 0UL;
 8002364:	4d11      	ldr	r5, [pc, #68]	; (80023ac <xPortStartScheduler+0x64>)
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <xPortStartScheduler+0x68>)
	portNVIC_SYSTICK_CTRL = 0UL;
 8002368:	602c      	str	r4, [r5, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800236a:	601c      	str	r4, [r3, #0]
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <xPortStartScheduler+0x6c>)
{
 800236e:	b083      	sub	sp, #12
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	0089      	lsls	r1, r1, #2
 8002374:	f7fd fec8 	bl	8000108 <__udivsi3>
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <xPortStartScheduler+0x70>)
 800237a:	3801      	subs	r0, #1
 800237c:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800237e:	2307      	movs	r3, #7
 8002380:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 8002382:	4d0e      	ldr	r5, [pc, #56]	; (80023bc <xPortStartScheduler+0x74>)
 8002384:	602c      	str	r4, [r5, #0]
	vPortStartFirstTask();
 8002386:	f7ff ffb3 	bl	80022f0 <vPortStartFirstTask>
	vTaskSwitchContext();
 800238a:	f7ff ff21 	bl	80021d0 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800238e:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0UL;
 8002390:	9401      	str	r4, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8002392:	3301      	adds	r3, #1
 8002394:	d001      	beq.n	800239a <xPortStartScheduler+0x52>
 8002396:	b672      	cpsid	i
 8002398:	e7fe      	b.n	8002398 <xPortStartScheduler+0x50>
	portDISABLE_INTERRUPTS();
 800239a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800239c:	9b01      	ldr	r3, [sp, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0fc      	beq.n	800239c <xPortStartScheduler+0x54>
}
 80023a2:	2000      	movs	r0, #0
 80023a4:	b003      	add	sp, #12
 80023a6:	bd30      	pop	{r4, r5, pc}
 80023a8:	e000ed20 	.word	0xe000ed20
 80023ac:	e000e010 	.word	0xe000e010
 80023b0:	e000e018 	.word	0xe000e018
 80023b4:	20000000 	.word	0x20000000
 80023b8:	e000e014 	.word	0xe000e014
 80023bc:	2000000c 	.word	0x2000000c

080023c0 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <vPortYield+0x14>)
 80023c4:	0552      	lsls	r2, r2, #21
 80023c6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80023c8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80023cc:	f3bf 8f6f 	isb	sy
}
 80023d0:	4770      	bx	lr
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80023d8:	b672      	cpsid	i
    uxCriticalNesting++;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <vPortEnterCritical+0x14>)
 80023dc:	6813      	ldr	r3, [r2, #0]
 80023de:	3301      	adds	r3, #1
 80023e0:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 80023e2:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80023e6:	f3bf 8f6f 	isb	sy
}
 80023ea:	4770      	bx	lr
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80023f0:	4a05      	ldr	r2, [pc, #20]	; (8002408 <vPortExitCritical+0x18>)
 80023f2:	6813      	ldr	r3, [r2, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <vPortExitCritical+0xc>
 80023f8:	b672      	cpsid	i
 80023fa:	e7fe      	b.n	80023fa <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80023fc:	3b01      	subs	r3, #1
 80023fe:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8002400:	2b00      	cmp	r3, #0
 8002402:	d100      	bne.n	8002406 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 8002404:	b662      	cpsie	i
}
 8002406:	4770      	bx	lr
 8002408:	2000000c 	.word	0x2000000c

0800240c <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800240c:	f3ef 8010 	mrs	r0, PRIMASK
 8002410:	b672      	cpsid	i
 8002412:	4770      	bx	lr

08002414 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8002414:	f380 8810 	msr	PRIMASK, r0
 8002418:	4770      	bx	lr
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	0000      	movs	r0, r0
	...

08002420 <PendSV_Handler>:
	__asm volatile
 8002420:	f3ef 8009 	mrs	r0, PSP
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <pxCurrentTCBConst>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	3820      	subs	r0, #32
 800242a:	6010      	str	r0, [r2, #0]
 800242c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800242e:	4644      	mov	r4, r8
 8002430:	464d      	mov	r5, r9
 8002432:	4656      	mov	r6, sl
 8002434:	465f      	mov	r7, fp
 8002436:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002438:	b508      	push	{r3, lr}
 800243a:	b672      	cpsid	i
 800243c:	f7ff fec8 	bl	80021d0 <vTaskSwitchContext>
 8002440:	b662      	cpsie	i
 8002442:	bc0c      	pop	{r2, r3}
 8002444:	6811      	ldr	r1, [r2, #0]
 8002446:	6808      	ldr	r0, [r1, #0]
 8002448:	3010      	adds	r0, #16
 800244a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800244c:	46a0      	mov	r8, r4
 800244e:	46a9      	mov	r9, r5
 8002450:	46b2      	mov	sl, r6
 8002452:	46bb      	mov	fp, r7
 8002454:	f380 8809 	msr	PSP, r0
 8002458:	3820      	subs	r0, #32
 800245a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800245c:	4718      	bx	r3
 800245e:	46c0      	nop			; (mov r8, r8)

08002460 <pxCurrentTCBConst>:
 8002460:	20000374 	.word	0x20000374

08002464 <SysTick_Handler>:
{
 8002464:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002466:	f7ff ffd1 	bl	800240c <ulSetInterruptMaskFromISR>
 800246a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800246c:	f7ff fd0e 	bl	8001e8c <xTaskIncrementTick>
 8002470:	2800      	cmp	r0, #0
 8002472:	d003      	beq.n	800247c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	4b03      	ldr	r3, [pc, #12]	; (8002484 <SysTick_Handler+0x20>)
 8002478:	0552      	lsls	r2, r2, #21
 800247a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800247c:	0020      	movs	r0, r4
 800247e:	f7ff ffc9 	bl	8002414 <vClearInterruptMaskFromISR>
}
 8002482:	bd10      	pop	{r4, pc}
 8002484:	e000ed04 	.word	0xe000ed04

08002488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	46ce      	mov	lr, r9
 800248c:	4647      	mov	r7, r8
 800248e:	b580      	push	{r7, lr}
 8002490:	0004      	movs	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8002492:	f7ff fcf3 	bl	8001e7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002496:	4a4f      	ldr	r2, [pc, #316]	; (80025d4 <pvPortMalloc+0x14c>)
 8002498:	6815      	ldr	r5, [r2, #0]
 800249a:	2d00      	cmp	r5, #0
 800249c:	d05f      	beq.n	800255e <pvPortMalloc+0xd6>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800249e:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <pvPortMalloc+0x150>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4698      	mov	r8, r3
 80024a4:	4643      	mov	r3, r8
 80024a6:	4223      	tst	r3, r4
 80024a8:	d12a      	bne.n	8002500 <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80024aa:	2c00      	cmp	r4, #0
 80024ac:	d028      	beq.n	8002500 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 80024ae:	0020      	movs	r0, r4

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024b0:	2307      	movs	r3, #7
				xWantedSize += xHeapStructSize;
 80024b2:	3008      	adds	r0, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024b4:	4203      	tst	r3, r0
 80024b6:	d001      	beq.n	80024bc <pvPortMalloc+0x34>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80024b8:	4398      	bics	r0, r3
 80024ba:	3008      	adds	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024bc:	2800      	cmp	r0, #0
 80024be:	d01f      	beq.n	8002500 <pvPortMalloc+0x78>
 80024c0:	4b46      	ldr	r3, [pc, #280]	; (80025dc <pvPortMalloc+0x154>)
 80024c2:	4699      	mov	r9, r3
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	469c      	mov	ip, r3
 80024c8:	4283      	cmp	r3, r0
 80024ca:	d319      	bcc.n	8002500 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80024cc:	4f44      	ldr	r7, [pc, #272]	; (80025e0 <pvPortMalloc+0x158>)
				pxPreviousBlock = &xStart;
 80024ce:	003c      	movs	r4, r7
				pxBlock = xStart.pxNextFreeBlock;
 80024d0:	683b      	ldr	r3, [r7, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024d2:	e004      	b.n	80024de <pvPortMalloc+0x56>
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2a00      	cmp	r2, #0
 80024d8:	d004      	beq.n	80024e4 <pvPortMalloc+0x5c>
 80024da:	001c      	movs	r4, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	4281      	cmp	r1, r0
 80024e2:	d3f7      	bcc.n	80024d4 <pvPortMalloc+0x4c>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80024e4:	42ab      	cmp	r3, r5
 80024e6:	d00b      	beq.n	8002500 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80024e8:	001e      	movs	r6, r3

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024ea:	681a      	ldr	r2, [r3, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80024ec:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024ee:	6022      	str	r2, [r4, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80024f0:	1a0a      	subs	r2, r1, r0
 80024f2:	2a10      	cmp	r2, #16
 80024f4:	d920      	bls.n	8002538 <pvPortMalloc+0xb0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80024f6:	1819      	adds	r1, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024f8:	074c      	lsls	r4, r1, #29
 80024fa:	d009      	beq.n	8002510 <pvPortMalloc+0x88>
 80024fc:	b672      	cpsid	i
 80024fe:	e7fe      	b.n	80024fe <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002500:	f7ff fe18 	bl	8002134 <xTaskResumeAll>
 8002504:	2600      	movs	r6, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8002506:	0030      	movs	r0, r6
 8002508:	bcc0      	pop	{r6, r7}
 800250a:	46b9      	mov	r9, r7
 800250c:	46b0      	mov	r8, r6
 800250e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002510:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002512:	003a      	movs	r2, r7
						pxBlock->xBlockSize = xWantedSize;
 8002514:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002516:	0010      	movs	r0, r2
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	4291      	cmp	r1, r2
 800251c:	d8fb      	bhi.n	8002516 <pvPortMalloc+0x8e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800251e:	6844      	ldr	r4, [r0, #4]
 8002520:	1907      	adds	r7, r0, r4
 8002522:	42b9      	cmp	r1, r7
 8002524:	d044      	beq.n	80025b0 <pvPortMalloc+0x128>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002526:	684c      	ldr	r4, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002528:	190f      	adds	r7, r1, r4
 800252a:	42ba      	cmp	r2, r7
 800252c:	d04a      	beq.n	80025c4 <pvPortMalloc+0x13c>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800252e:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002530:	4288      	cmp	r0, r1
 8002532:	d000      	beq.n	8002536 <pvPortMalloc+0xae>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002534:	6001      	str	r1, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	4662      	mov	r2, ip
 800253a:	4648      	mov	r0, r9
 800253c:	1a52      	subs	r2, r2, r1
 800253e:	6002      	str	r2, [r0, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002540:	4828      	ldr	r0, [pc, #160]	; (80025e4 <pvPortMalloc+0x15c>)
 8002542:	6804      	ldr	r4, [r0, #0]
 8002544:	42a2      	cmp	r2, r4
 8002546:	d331      	bcc.n	80025ac <pvPortMalloc+0x124>
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002548:	4642      	mov	r2, r8
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
	( void ) xTaskResumeAll();
 8002552:	f7ff fdef 	bl	8002134 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002556:	0773      	lsls	r3, r6, #29
 8002558:	d0d5      	beq.n	8002506 <pvPortMalloc+0x7e>
 800255a:	b672      	cpsid	i
 800255c:	e7fe      	b.n	800255c <pvPortMalloc+0xd4>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800255e:	2107      	movs	r1, #7
	uxAddress = ( size_t ) ucHeap;
 8002560:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <pvPortMalloc+0x160>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002562:	4219      	tst	r1, r3
 8002564:	d11a      	bne.n	800259c <pvPortMalloc+0x114>
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	0109      	lsls	r1, r1, #4
 800256a:	185d      	adds	r5, r3, r1
 800256c:	0019      	movs	r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 800256e:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002570:	4e1b      	ldr	r6, [pc, #108]	; (80025e0 <pvPortMalloc+0x158>)
	uxAddress -= xHeapStructSize;
 8002572:	3d08      	subs	r5, #8
	xStart.xBlockSize = ( size_t ) 0;
 8002574:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002576:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002578:	2607      	movs	r6, #7
 800257a:	43b5      	bics	r5, r6
	pxEnd = ( void * ) uxAddress;
 800257c:	6015      	str	r5, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800257e:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <pvPortMalloc+0x15c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002580:	1aeb      	subs	r3, r5, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002584:	4a15      	ldr	r2, [pc, #84]	; (80025dc <pvPortMalloc+0x154>)
	pxEnd->xBlockSize = 0;
 8002586:	6068      	str	r0, [r5, #4]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002588:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800258a:	2280      	movs	r2, #128	; 0x80
	pxEnd->pxNextFreeBlock = NULL;
 800258c:	6028      	str	r0, [r5, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800258e:	604b      	str	r3, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <pvPortMalloc+0x150>)
 8002592:	0612      	lsls	r2, r2, #24
}
 8002594:	4690      	mov	r8, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002596:	600d      	str	r5, [r1, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002598:	601a      	str	r2, [r3, #0]
}
 800259a:	e783      	b.n	80024a4 <pvPortMalloc+0x1c>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800259c:	2580      	movs	r5, #128	; 0x80
 800259e:	1dd8      	adds	r0, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80025a0:	012d      	lsls	r5, r5, #4
 80025a2:	195d      	adds	r5, r3, r5
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80025a4:	0003      	movs	r3, r0
 80025a6:	438b      	bics	r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025a8:	0019      	movs	r1, r3
 80025aa:	e7e0      	b.n	800256e <pvPortMalloc+0xe6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80025ac:	6002      	str	r2, [r0, #0]
 80025ae:	e7cb      	b.n	8002548 <pvPortMalloc+0xc0>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80025b0:	6849      	ldr	r1, [r1, #4]
 80025b2:	1864      	adds	r4, r4, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80025b4:	1901      	adds	r1, r0, r4
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80025b6:	6044      	str	r4, [r0, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80025b8:	428a      	cmp	r2, r1
 80025ba:	d002      	beq.n	80025c2 <pvPortMalloc+0x13a>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80025bc:	6859      	ldr	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025be:	6002      	str	r2, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80025c0:	e7ba      	b.n	8002538 <pvPortMalloc+0xb0>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80025c2:	0001      	movs	r1, r0
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80025c4:	42aa      	cmp	r2, r5
 80025c6:	d0b2      	beq.n	800252e <pvPortMalloc+0xa6>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025c8:	6855      	ldr	r5, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025ca:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025cc:	192c      	adds	r4, r5, r4
 80025ce:	604c      	str	r4, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025d0:	e7ad      	b.n	800252e <pvPortMalloc+0xa6>
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	2000049c 	.word	0x2000049c
 80025d8:	20000ca0 	.word	0x20000ca0
 80025dc:	20000ca4 	.word	0x20000ca4
 80025e0:	20000cac 	.word	0x20000cac
 80025e4:	20000ca8 	.word	0x20000ca8
 80025e8:	200004a0 	.word	0x200004a0

080025ec <vPortFree>:
{
 80025ec:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 80025ee:	2800      	cmp	r0, #0
 80025f0:	d029      	beq.n	8002646 <vPortFree+0x5a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80025f2:	4a1e      	ldr	r2, [pc, #120]	; (800266c <vPortFree+0x80>)
 80025f4:	3808      	subs	r0, #8
 80025f6:	6843      	ldr	r3, [r0, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	0004      	movs	r4, r0
 80025fc:	421a      	tst	r2, r3
 80025fe:	d004      	beq.n	800260a <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002600:	6801      	ldr	r1, [r0, #0]
 8002602:	2900      	cmp	r1, #0
 8002604:	d003      	beq.n	800260e <vPortFree+0x22>
 8002606:	b672      	cpsid	i
 8002608:	e7fe      	b.n	8002608 <vPortFree+0x1c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800260a:	b672      	cpsid	i
 800260c:	e7fe      	b.n	800260c <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800260e:	4393      	bics	r3, r2
 8002610:	6043      	str	r3, [r0, #4]
		puc -= xHeapStructSize;
 8002612:	0005      	movs	r5, r0
				vTaskSuspendAll();
 8002614:	f7ff fc32 	bl	8001e7c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002618:	4a15      	ldr	r2, [pc, #84]	; (8002670 <vPortFree+0x84>)
 800261a:	6861      	ldr	r1, [r4, #4]
 800261c:	6813      	ldr	r3, [r2, #0]
 800261e:	185b      	adds	r3, r3, r1
 8002620:	6013      	str	r3, [r2, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <vPortFree+0x88>)
 8002624:	001a      	movs	r2, r3
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	429c      	cmp	r4, r3
 800262a:	d8fb      	bhi.n	8002624 <vPortFree+0x38>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800262c:	6850      	ldr	r0, [r2, #4]
 800262e:	1816      	adds	r6, r2, r0
 8002630:	42b4      	cmp	r4, r6
 8002632:	d009      	beq.n	8002648 <vPortFree+0x5c>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002634:	1864      	adds	r4, r4, r1
 8002636:	42a3      	cmp	r3, r4
 8002638:	d00e      	beq.n	8002658 <vPortFree+0x6c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800263a:	602b      	str	r3, [r5, #0]
	if( pxIterator != pxBlockToInsert )
 800263c:	42aa      	cmp	r2, r5
 800263e:	d000      	beq.n	8002642 <vPortFree+0x56>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002640:	6015      	str	r5, [r2, #0]
				( void ) xTaskResumeAll();
 8002642:	f7ff fd77 	bl	8002134 <xTaskResumeAll>
}
 8002646:	bd70      	pop	{r4, r5, r6, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002648:	1809      	adds	r1, r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800264a:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800264c:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800264e:	4283      	cmp	r3, r0
 8002650:	d001      	beq.n	8002656 <vPortFree+0x6a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002652:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8002654:	e7f5      	b.n	8002642 <vPortFree+0x56>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002656:	0015      	movs	r5, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002658:	4807      	ldr	r0, [pc, #28]	; (8002678 <vPortFree+0x8c>)
 800265a:	6800      	ldr	r0, [r0, #0]
 800265c:	4283      	cmp	r3, r0
 800265e:	d0ec      	beq.n	800263a <vPortFree+0x4e>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002660:	6858      	ldr	r0, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002662:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002664:	1841      	adds	r1, r0, r1
 8002666:	6069      	str	r1, [r5, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002668:	e7e7      	b.n	800263a <vPortFree+0x4e>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	20000ca0 	.word	0x20000ca0
 8002670:	20000ca4 	.word	0x20000ca4
 8002674:	20000cac 	.word	0x20000cac
 8002678:	2000049c 	.word	0x2000049c

0800267c <memset>:
 800267c:	0003      	movs	r3, r0
 800267e:	1882      	adds	r2, r0, r2
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	7019      	strb	r1, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <_reclaim_reent>:
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <_reclaim_reent+0xb8>)
 800268e:	b570      	push	{r4, r5, r6, lr}
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	0004      	movs	r4, r0
 8002694:	4283      	cmp	r3, r0
 8002696:	d042      	beq.n	800271e <_reclaim_reent+0x92>
 8002698:	69c3      	ldr	r3, [r0, #28]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <_reclaim_reent+0x28>
 800269e:	2500      	movs	r5, #0
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	42ab      	cmp	r3, r5
 80026a4:	d140      	bne.n	8002728 <_reclaim_reent+0x9c>
 80026a6:	69e3      	ldr	r3, [r4, #28]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	2900      	cmp	r1, #0
 80026ac:	d002      	beq.n	80026b4 <_reclaim_reent+0x28>
 80026ae:	0020      	movs	r0, r4
 80026b0:	f000 f870 	bl	8002794 <_free_r>
 80026b4:	6961      	ldr	r1, [r4, #20]
 80026b6:	2900      	cmp	r1, #0
 80026b8:	d002      	beq.n	80026c0 <_reclaim_reent+0x34>
 80026ba:	0020      	movs	r0, r4
 80026bc:	f000 f86a 	bl	8002794 <_free_r>
 80026c0:	69e1      	ldr	r1, [r4, #28]
 80026c2:	2900      	cmp	r1, #0
 80026c4:	d002      	beq.n	80026cc <_reclaim_reent+0x40>
 80026c6:	0020      	movs	r0, r4
 80026c8:	f000 f864 	bl	8002794 <_free_r>
 80026cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80026ce:	2900      	cmp	r1, #0
 80026d0:	d002      	beq.n	80026d8 <_reclaim_reent+0x4c>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 f85e 	bl	8002794 <_free_r>
 80026d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026da:	2900      	cmp	r1, #0
 80026dc:	d002      	beq.n	80026e4 <_reclaim_reent+0x58>
 80026de:	0020      	movs	r0, r4
 80026e0:	f000 f858 	bl	8002794 <_free_r>
 80026e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80026e6:	2900      	cmp	r1, #0
 80026e8:	d002      	beq.n	80026f0 <_reclaim_reent+0x64>
 80026ea:	0020      	movs	r0, r4
 80026ec:	f000 f852 	bl	8002794 <_free_r>
 80026f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80026f2:	2900      	cmp	r1, #0
 80026f4:	d002      	beq.n	80026fc <_reclaim_reent+0x70>
 80026f6:	0020      	movs	r0, r4
 80026f8:	f000 f84c 	bl	8002794 <_free_r>
 80026fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80026fe:	2900      	cmp	r1, #0
 8002700:	d002      	beq.n	8002708 <_reclaim_reent+0x7c>
 8002702:	0020      	movs	r0, r4
 8002704:	f000 f846 	bl	8002794 <_free_r>
 8002708:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800270a:	2900      	cmp	r1, #0
 800270c:	d002      	beq.n	8002714 <_reclaim_reent+0x88>
 800270e:	0020      	movs	r0, r4
 8002710:	f000 f840 	bl	8002794 <_free_r>
 8002714:	6a23      	ldr	r3, [r4, #32]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <_reclaim_reent+0x92>
 800271a:	0020      	movs	r0, r4
 800271c:	4798      	blx	r3
 800271e:	bd70      	pop	{r4, r5, r6, pc}
 8002720:	5949      	ldr	r1, [r1, r5]
 8002722:	2900      	cmp	r1, #0
 8002724:	d108      	bne.n	8002738 <_reclaim_reent+0xac>
 8002726:	3504      	adds	r5, #4
 8002728:	69e3      	ldr	r3, [r4, #28]
 800272a:	68d9      	ldr	r1, [r3, #12]
 800272c:	2d80      	cmp	r5, #128	; 0x80
 800272e:	d1f7      	bne.n	8002720 <_reclaim_reent+0x94>
 8002730:	0020      	movs	r0, r4
 8002732:	f000 f82f 	bl	8002794 <_free_r>
 8002736:	e7b6      	b.n	80026a6 <_reclaim_reent+0x1a>
 8002738:	680e      	ldr	r6, [r1, #0]
 800273a:	0020      	movs	r0, r4
 800273c:	f000 f82a 	bl	8002794 <_free_r>
 8002740:	0031      	movs	r1, r6
 8002742:	e7ee      	b.n	8002722 <_reclaim_reent+0x96>
 8002744:	2000005c 	.word	0x2000005c

08002748 <__libc_init_array>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	2600      	movs	r6, #0
 800274c:	4c0c      	ldr	r4, [pc, #48]	; (8002780 <__libc_init_array+0x38>)
 800274e:	4d0d      	ldr	r5, [pc, #52]	; (8002784 <__libc_init_array+0x3c>)
 8002750:	1b64      	subs	r4, r4, r5
 8002752:	10a4      	asrs	r4, r4, #2
 8002754:	42a6      	cmp	r6, r4
 8002756:	d109      	bne.n	800276c <__libc_init_array+0x24>
 8002758:	2600      	movs	r6, #0
 800275a:	f000 f875 	bl	8002848 <_init>
 800275e:	4c0a      	ldr	r4, [pc, #40]	; (8002788 <__libc_init_array+0x40>)
 8002760:	4d0a      	ldr	r5, [pc, #40]	; (800278c <__libc_init_array+0x44>)
 8002762:	1b64      	subs	r4, r4, r5
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	42a6      	cmp	r6, r4
 8002768:	d105      	bne.n	8002776 <__libc_init_array+0x2e>
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	00b3      	lsls	r3, r6, #2
 800276e:	58eb      	ldr	r3, [r5, r3]
 8002770:	4798      	blx	r3
 8002772:	3601      	adds	r6, #1
 8002774:	e7ee      	b.n	8002754 <__libc_init_array+0xc>
 8002776:	00b3      	lsls	r3, r6, #2
 8002778:	58eb      	ldr	r3, [r5, r3]
 800277a:	4798      	blx	r3
 800277c:	3601      	adds	r6, #1
 800277e:	e7f2      	b.n	8002766 <__libc_init_array+0x1e>
 8002780:	080028c4 	.word	0x080028c4
 8002784:	080028c4 	.word	0x080028c4
 8002788:	080028c8 	.word	0x080028c8
 800278c:	080028c4 	.word	0x080028c4

08002790 <__retarget_lock_acquire_recursive>:
 8002790:	4770      	bx	lr

08002792 <__retarget_lock_release_recursive>:
 8002792:	4770      	bx	lr

08002794 <_free_r>:
 8002794:	b570      	push	{r4, r5, r6, lr}
 8002796:	0005      	movs	r5, r0
 8002798:	2900      	cmp	r1, #0
 800279a:	d010      	beq.n	80027be <_free_r+0x2a>
 800279c:	1f0c      	subs	r4, r1, #4
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	da00      	bge.n	80027a6 <_free_r+0x12>
 80027a4:	18e4      	adds	r4, r4, r3
 80027a6:	0028      	movs	r0, r5
 80027a8:	f000 f83e 	bl	8002828 <__malloc_lock>
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <_free_r+0x90>)
 80027ae:	6813      	ldr	r3, [r2, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <_free_r+0x2c>
 80027b4:	6063      	str	r3, [r4, #4]
 80027b6:	6014      	str	r4, [r2, #0]
 80027b8:	0028      	movs	r0, r5
 80027ba:	f000 f83d 	bl	8002838 <__malloc_unlock>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	42a3      	cmp	r3, r4
 80027c2:	d908      	bls.n	80027d6 <_free_r+0x42>
 80027c4:	6820      	ldr	r0, [r4, #0]
 80027c6:	1821      	adds	r1, r4, r0
 80027c8:	428b      	cmp	r3, r1
 80027ca:	d1f3      	bne.n	80027b4 <_free_r+0x20>
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	1809      	adds	r1, r1, r0
 80027d2:	6021      	str	r1, [r4, #0]
 80027d4:	e7ee      	b.n	80027b4 <_free_r+0x20>
 80027d6:	001a      	movs	r2, r3
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <_free_r+0x4e>
 80027de:	42a3      	cmp	r3, r4
 80027e0:	d9f9      	bls.n	80027d6 <_free_r+0x42>
 80027e2:	6811      	ldr	r1, [r2, #0]
 80027e4:	1850      	adds	r0, r2, r1
 80027e6:	42a0      	cmp	r0, r4
 80027e8:	d10b      	bne.n	8002802 <_free_r+0x6e>
 80027ea:	6820      	ldr	r0, [r4, #0]
 80027ec:	1809      	adds	r1, r1, r0
 80027ee:	1850      	adds	r0, r2, r1
 80027f0:	6011      	str	r1, [r2, #0]
 80027f2:	4283      	cmp	r3, r0
 80027f4:	d1e0      	bne.n	80027b8 <_free_r+0x24>
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	1841      	adds	r1, r0, r1
 80027fc:	6011      	str	r1, [r2, #0]
 80027fe:	6053      	str	r3, [r2, #4]
 8002800:	e7da      	b.n	80027b8 <_free_r+0x24>
 8002802:	42a0      	cmp	r0, r4
 8002804:	d902      	bls.n	800280c <_free_r+0x78>
 8002806:	230c      	movs	r3, #12
 8002808:	602b      	str	r3, [r5, #0]
 800280a:	e7d5      	b.n	80027b8 <_free_r+0x24>
 800280c:	6820      	ldr	r0, [r4, #0]
 800280e:	1821      	adds	r1, r4, r0
 8002810:	428b      	cmp	r3, r1
 8002812:	d103      	bne.n	800281c <_free_r+0x88>
 8002814:	6819      	ldr	r1, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	1809      	adds	r1, r1, r0
 800281a:	6021      	str	r1, [r4, #0]
 800281c:	6063      	str	r3, [r4, #4]
 800281e:	6054      	str	r4, [r2, #4]
 8002820:	e7ca      	b.n	80027b8 <_free_r+0x24>
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	20000df0 	.word	0x20000df0

08002828 <__malloc_lock>:
 8002828:	b510      	push	{r4, lr}
 800282a:	4802      	ldr	r0, [pc, #8]	; (8002834 <__malloc_lock+0xc>)
 800282c:	f7ff ffb0 	bl	8002790 <__retarget_lock_acquire_recursive>
 8002830:	bd10      	pop	{r4, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	20000dec 	.word	0x20000dec

08002838 <__malloc_unlock>:
 8002838:	b510      	push	{r4, lr}
 800283a:	4802      	ldr	r0, [pc, #8]	; (8002844 <__malloc_unlock+0xc>)
 800283c:	f7ff ffa9 	bl	8002792 <__retarget_lock_release_recursive>
 8002840:	bd10      	pop	{r4, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	20000dec 	.word	0x20000dec

08002848 <_init>:
 8002848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284e:	bc08      	pop	{r3}
 8002850:	469e      	mov	lr, r3
 8002852:	4770      	bx	lr

08002854 <_fini>:
 8002854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285a:	bc08      	pop	{r3}
 800285c:	469e      	mov	lr, r3
 800285e:	4770      	bx	lr
